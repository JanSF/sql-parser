#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 361)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    77,   105,   249,   105,   158,    14,   104,   254,   104,   252,
   142,    37,   114,   118,   260,    40,    41,   133,   132,   261,
   169,   238,   141,   137,   138,   223,    39,    77,    22,    39,
   223,    39,    39,    51,   185,    51,    51,  -138,    51,   248,
   251,   156,   253,    80,    81,   119,    65,    78,    69,    71,
    72,    73,    74,    77,    82,   192,    86,    87,    88,    89,
    61,   189,    51,    80,    81,   116,   117,  -138,  -138,  -138,
    80,    81,   256,    65,    78,    69,    71,    72,    73,    74,
    77,    82,    14,    86,    87,    88,    89,   185,    51,   269,
   270,   223,   271,   238,   256,   275,    80,    81,   277,    65,
    78,    69,    71,    72,    73,    74,    77,    82,   192,    86,
    87,    88,    89,    61,   189,    51,    39,    51,   280,   159,
   282,   210,    15,    80,    81,    23,    65,    78,    69,    71,
    72,    73,    74,    77,    82,    25,    86,    87,    88,    89,
   185,    51,    26,    28,    29,    43,    44,    22,    22,    80,
    81,    91,    65,    78,    69,    71,    72,    73,    74,    77,
    82,   192,    86,    87,    88,    89,   254,   189,    51,    92,
    93,    94,    95,    39,    22,    22,    80,    81,    99,    65,
    78,    69,    71,    72,    73,    74,    77,    82,   112,    86,
    87,    88,    89,    61,    51,   113,   -94,   123,   124,   125,
   126,   127,    80,    81,   128,    65,    78,    69,    71,    72,
    73,    74,    77,    82,  -158,    86,    87,    88,    89,   254,
   129,    51,   130,   131,   134,    22,    22,   139,   109,    80,
    81,   146,    65,    78,    69,    71,    72,    73,    74,    77,
    82,   148,    86,    87,    88,    89,   254,    51,    22,    39,
   156,   165,   170,   176,   177,    80,    81,   179,    65,    78,
    69,    71,    72,    73,    74,    77,    82,   180,    86,    87,
    88,    89,   254,   184,    51,   205,   206,   207,   208,   209,
   211,   213,    80,    81,   215,    65,    78,    69,    71,    72,
    73,    74,    77,    82,   216,    86,    87,    88,    89,   254,
    51,   218,   219,   223,   235,   nil,   nil,   nil,    80,    81,
   nil,    65,    78,    69,    71,    72,    73,    74,    77,    82,
   nil,    86,    87,    88,    89,   254,   nil,    51,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    80,    81,   nil,    65,    78,
    69,    71,    72,    73,    74,    77,    82,   nil,    86,    87,
    88,    89,   254,    51,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    80,    81,   nil,    65,    78,    69,    71,    72,    73,
    74,    77,    82,   nil,    86,    87,    88,    89,   254,   nil,
    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,    81,
   nil,    65,    78,    69,    71,    72,    73,    74,    77,    82,
   nil,    86,    87,    88,    89,    61,    51,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    80,    81,   nil,    65,    78,    69,
    71,    72,    73,    74,   nil,    82,   nil,    86,    87,    88,
    89,    77,   nil,    51,   nil,   nil,   nil,   nil,   185,   nil,
   nil,    80,    81,   nil,    65,    78,    69,    71,    72,    73,
    74,    77,    82,   nil,    86,    87,    88,    89,    61,   192,
   nil,   nil,   nil,   nil,   nil,   189,    51,   nil,   nil,    77,
   nil,   nil,   nil,   nil,    80,    81,    61,    65,    78,    69,
    71,    72,    73,    74,   nil,    82,    51,    86,    87,    88,
    89,   nil,   nil,   nil,    80,    81,   nil,    65,    78,    69,
    71,    72,    73,    74,    51,    82,   nil,    86,    87,    88,
    89,   226,    80,    81,   nil,    65,    78,    69,    71,    72,
    73,    74,    77,    82,   nil,    86,    87,    88,    89,   254,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    77,   224,   225,    30,   227,   228,   nil,   254,   nil,   nil,
   229,   230,   231,   232,   233,   234,   nil,    51,    31,   nil,
    33,    34,   nil,    35,    36,    80,    81,   nil,    65,    78,
    69,    71,    72,    73,    74,    51,    82,   nil,    86,    87,
    88,    89,   nil,    80,    81,   nil,    65,    78,    69,    71,
    72,    73,    74,    77,    82,    30,    86,    87,    88,    89,
    61,   nil,   nil,   nil,    30,    14,   nil,   nil,   nil,   nil,
    31,    77,    33,    34,   nil,    35,    36,   nil,    61,    31,
   nil,    33,    34,    14,    35,    36,   174,   175,    51,   nil,
   nil,    77,   nil,   nil,   nil,   nil,    80,    81,    61,    65,
    78,    69,    71,    72,    73,    74,    51,    82,   nil,    86,
    87,    88,    89,   nil,    80,    81,   nil,    65,    78,    69,
    71,    72,    73,    74,    77,    82,    51,    86,    87,    88,
    89,   254,   nil,   nil,   nil,   nil,   nil,    65,    78,    69,
    71,    72,    73,    74,    77,    82,   nil,    86,    87,    88,
    89,    61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,
   nil,   nil,    77,   nil,   nil,   nil,   nil,    80,    81,    61,
    65,    78,    69,    71,    72,    73,    74,   nil,    82,    51,
    86,    87,    88,    89,   nil,   nil,   nil,    80,    81,   nil,
    65,    78,    69,    71,    72,    73,    74,    51,    82,   nil,
    86,    87,    88,    89,   nil,    80,    81,   nil,    65,    78,
    69,    71,    72,    73,    74,    77,    82,    30,    86,    87,
    88,    89,    61,   nil,   nil,   nil,    30,   nil,    47,   nil,
   nil,   nil,    31,   nil,    33,    34,   nil,    35,    36,   nil,
   nil,    31,    77,    33,    34,   nil,    35,    36,   nil,   185,
    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,    81,
   nil,    65,    78,    69,    71,    72,    73,    74,    77,    82,
   192,    86,    87,    88,    89,    61,   189,    51,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    80,    81,   nil,    65,    78,
    69,    71,    72,    73,    74,    77,    82,   nil,    86,    87,
    88,    89,    61,    51,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    80,    81,   nil,    65,    78,    69,    71,    72,    73,
    74,    77,    82,   nil,    86,    87,    88,    89,    61,   nil,
    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,    81,
   nil,    65,    78,    69,    71,    72,    73,    74,    77,    82,
   nil,    86,    87,    88,    89,   185,    51,   nil,   nil,   nil,
    14,   nil,   nil,   nil,    80,    81,   nil,    65,    78,    69,
    71,    72,    73,    74,    77,    82,   192,    86,    87,    88,
    89,    61,   189,    51,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    80,    81,   nil,    65,    78,    69,    71,    72,    73,
    74,    77,    82,   nil,    86,    87,    88,    89,    61,    51,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,    81,   nil,
    65,    78,    69,    71,    72,    73,    74,    77,    82,   nil,
    86,    87,    88,    89,   185,   nil,    51,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    80,    81,   nil,    65,    78,    69,
    71,    72,    73,    74,   nil,    82,    77,    86,    87,    88,
    89,   189,    51,    61,   nil,   nil,   nil,   nil,   nil,   nil,
    80,    81,   nil,    65,    78,    69,    71,    72,    73,    74,
   nil,    82,    77,    86,    87,    88,    89,   nil,   nil,    61,
   nil,    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,
    81,   nil,    65,    78,    69,    71,    72,    73,    74,   nil,
    82,   nil,    86,    87,    88,    89,   nil,    51,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    80,    81,   nil,    65,    78,
    69,    71,    72,    73,    74,   nil,    82,    30,    86,    87,
    88,    89,   nil,   108,   nil,   nil,   nil,   109,     7,     8,
     9,    10,    31,   nil,    33,    34,   nil,    35,    36,   nil,
   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,    14 ]

racc_action_check = [
   280,    44,   221,   139,   123,     3,    44,   280,   139,   224,
   102,    18,    50,    55,   228,    23,    23,    82,    82,   228,
   131,   190,   102,    99,    99,   212,   123,   148,     3,   213,
   221,    18,    50,   219,   148,   280,    44,    53,   139,   220,
   224,   222,   224,   280,   280,    55,   280,   280,   280,   280,
   280,   280,   280,   216,   280,   148,   280,   280,   280,   280,
   216,   148,   148,   131,   131,    54,    54,    53,    53,    53,
   148,   148,   226,   148,   148,   148,   148,   148,   148,   148,
   218,   148,   235,   148,   148,   148,   148,   218,   216,   240,
   241,   244,   245,   250,   252,   255,   216,   216,   260,   216,
   216,   216,   216,   216,   216,   216,   124,   216,   218,   216,
   216,   216,   216,   124,   218,   218,   270,   271,   272,   124,
   276,   164,     1,   218,   218,    10,   218,   218,   218,   218,
   218,   218,   218,   223,   218,    11,   218,   218,   218,   218,
   223,   124,    13,    14,    15,    24,    25,    26,    30,   124,
   124,    31,   124,   124,   124,   124,   124,   124,   124,   225,
   124,   223,   124,   124,   124,   124,   225,   223,   223,    32,
    34,    35,    36,    37,    40,    41,   223,   223,    43,   223,
   223,   223,   223,   223,   223,   223,   125,   223,    46,   223,
   223,   223,   223,   125,   225,    49,    51,    66,    69,    71,
    72,    73,   225,   225,    74,   225,   225,   225,   225,   225,
   225,   225,   227,   225,    75,   225,   225,   225,   225,   227,
    77,   125,    78,    79,    86,    91,    92,   100,   107,   125,
   125,   109,   125,   125,   125,   125,   125,   125,   125,   229,
   125,   111,   125,   125,   125,   125,   229,   227,   112,   114,
   122,   129,   132,   137,   138,   227,   227,   144,   227,   227,
   227,   227,   227,   227,   227,   230,   227,   145,   227,   227,
   227,   227,   230,   147,   229,   159,   160,   161,   162,   163,
   168,   175,   229,   229,   181,   229,   229,   229,   229,   229,
   229,   229,   231,   229,   182,   229,   229,   229,   229,   231,
   230,   183,   184,   186,   189,   nil,   nil,   nil,   230,   230,
   nil,   230,   230,   230,   230,   230,   230,   230,   232,   230,
   nil,   230,   230,   230,   230,   232,   nil,   231,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   231,   231,   nil,   231,   231,
   231,   231,   231,   231,   231,   233,   231,   nil,   231,   231,
   231,   231,   233,   232,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   232,   232,   nil,   232,   232,   232,   232,   232,   232,
   232,   234,   232,   nil,   232,   232,   232,   232,   234,   nil,
   233,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   233,   233,
   nil,   233,   233,   233,   233,   233,   233,   233,   126,   233,
   nil,   233,   233,   233,   233,   126,   234,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   234,   234,   nil,   234,   234,   234,
   234,   234,   234,   234,   nil,   234,   nil,   234,   234,   234,
   234,   238,   nil,   126,   nil,   nil,   nil,   nil,   238,   nil,
   nil,   126,   126,   nil,   126,   126,   126,   126,   126,   126,
   126,   127,   126,   nil,   126,   126,   126,   126,   127,   238,
   nil,   nil,   nil,   nil,   nil,   238,   238,   nil,   nil,   128,
   nil,   nil,   nil,   nil,   238,   238,   128,   238,   238,   238,
   238,   238,   238,   238,   nil,   238,   127,   238,   238,   238,
   238,   nil,   nil,   nil,   127,   127,   nil,   127,   127,   127,
   127,   127,   127,   127,   128,   127,   nil,   127,   127,   127,
   127,   188,   128,   128,   nil,   128,   128,   128,   128,   128,
   128,   128,   251,   128,   nil,   128,   128,   128,   128,   251,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   253,   188,   188,    17,   188,   188,   nil,   253,   nil,   nil,
   188,   188,   188,   188,   188,   188,   nil,   251,    17,   nil,
    17,    17,   nil,    17,    17,   251,   251,   nil,   251,   251,
   251,   251,   251,   251,   251,   253,   251,   nil,   251,   251,
   251,   251,   nil,   253,   253,   nil,   253,   253,   253,   253,
   253,   253,   253,   254,   253,    97,   253,   253,   253,   253,
   254,   nil,   nil,   nil,   136,   254,   nil,   nil,   nil,   nil,
    97,   256,    97,    97,   nil,    97,    97,   nil,   256,   136,
   nil,   136,   136,   256,   136,   136,   136,   136,   254,   nil,
   nil,    56,   nil,   nil,   nil,   nil,   254,   254,    56,   254,
   254,   254,   254,   254,   254,   254,   256,   254,   nil,   254,
   254,   254,   254,   nil,   256,   256,   nil,   256,   256,   256,
   256,   256,   256,   256,   275,   256,    56,   256,   256,   256,
   256,   275,   nil,   nil,   nil,   nil,   nil,    56,    56,    56,
    56,    56,    56,    56,   146,    56,   nil,    56,    56,    56,
    56,   146,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   275,
   nil,   nil,    61,   nil,   nil,   nil,   nil,   275,   275,    61,
   275,   275,   275,   275,   275,   275,   275,   nil,   275,   146,
   275,   275,   275,   275,   nil,   nil,   nil,   146,   146,   nil,
   146,   146,   146,   146,   146,   146,   146,    61,   146,   nil,
   146,   146,   146,   146,   nil,    61,    61,   nil,    61,    61,
    61,    61,    61,    61,    61,    27,    61,    98,    61,    61,
    61,    61,    27,   nil,   nil,   nil,   149,   nil,    27,   nil,
   nil,   nil,    98,   nil,    98,    98,   nil,    98,    98,   nil,
   nil,   149,   174,   149,   149,   nil,   149,   149,   nil,   174,
    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,    27,
   nil,    27,    27,    27,    27,    27,    27,    27,   108,    27,
   174,    27,    27,    27,    27,   108,   174,   174,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   174,   174,   nil,   174,   174,
   174,   174,   174,   174,   174,   180,   174,   nil,   174,   174,
   174,   174,   180,   108,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   108,   108,   nil,   108,   108,   108,   108,   108,   108,
   108,   113,   108,   nil,   108,   108,   108,   108,   113,   nil,
   180,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   180,   180,
   nil,   180,   180,   180,   180,   180,   180,   180,   185,   180,
   nil,   180,   180,   180,   180,   185,   113,   nil,   nil,   nil,
   185,   nil,   nil,   nil,   113,   113,   nil,   113,   113,   113,
   113,   113,   113,   113,   116,   113,   185,   113,   113,   113,
   113,   116,   185,   185,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   185,   185,   nil,   185,   185,   185,   185,   185,   185,
   185,   117,   185,   nil,   185,   185,   185,   185,   117,   116,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   116,   116,   nil,
   116,   116,   116,   116,   116,   116,   116,   192,   116,   nil,
   116,   116,   116,   116,   192,   nil,   117,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   117,   117,   nil,   117,   117,   117,
   117,   117,   117,   117,   nil,   117,   118,   117,   117,   117,
   117,   192,   192,   118,   nil,   nil,   nil,   nil,   nil,   nil,
   192,   192,   nil,   192,   192,   192,   192,   192,   192,   192,
   nil,   192,   119,   192,   192,   192,   192,   nil,   nil,   119,
   nil,   118,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   118,
   118,   nil,   118,   118,   118,   118,   118,   118,   118,   nil,
   118,   nil,   118,   118,   118,   118,   nil,   119,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   119,   119,   nil,   119,   119,
   119,   119,   119,   119,   119,   nil,   119,    45,   119,   119,
   119,   119,   nil,    45,   nil,   nil,   nil,    45,     0,     0,
     0,     0,    45,   nil,    45,    45,   nil,    45,    45,   nil,
   nil,   nil,   nil,   nil,   nil,     0,   nil,   nil,     0 ]

racc_action_pointer = [
  1086,   122,   nil,   -17,   nil,   nil,   nil,   nil,   nil,   nil,
   119,   122,   nil,   122,   119,   144,   nil,   532,   -14,   nil,
   nil,   nil,   nil,     8,   136,   132,   102,   745,   nil,   nil,
   103,   124,   142,   nil,   140,   141,   142,   128,   nil,   nil,
   129,   130,   nil,   168,    -9,  1066,   181,   nil,   nil,   184,
   -13,   139,   nil,    14,    12,   -10,   621,   nil,   nil,   nil,
   nil,   692,   nil,   nil,   nil,   nil,   140,   nil,   nil,   181,
   nil,   182,   183,   184,   187,   151,   nil,   163,   212,   160,
   nil,   nil,   -47,   nil,   nil,   nil,   157,   nil,   nil,   nil,
   nil,   180,   181,   nil,   nil,   nil,   nil,   584,   746,    12,
   216,   nil,     6,   nil,   nil,   nil,   nil,   207,   798,   214,
   nil,   206,   203,   851,   204,   nil,   904,   931,   986,  1012,
   nil,   nil,   232,   -19,    96,   176,   388,   441,   459,   241,
   nil,    10,   188,   nil,   nil,   nil,   593,   243,   244,    -7,
   nil,   nil,   nil,   nil,   239,   256,   674,   237,    17,   755,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   257,
   258,   259,   260,   261,   103,   nil,   nil,   nil,   270,   nil,
   nil,   nil,   nil,   nil,   772,   264,   nil,   nil,   nil,   nil,
   825,   266,   283,   264,   288,   878,   257,   nil,   503,   287,
   -19,   nil,   957,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -21,   -16,   nil,   nil,    43,   nil,    70,   -12,
    21,   -16,    23,   123,     1,   149,    55,   202,   -24,   229,
   255,   282,   308,   335,   361,    60,   nil,   nil,   421,   nil,
    71,    79,   nil,   nil,    45,    81,   nil,   nil,   nil,   nil,
    53,   512,    77,   530,   583,    55,   601,   nil,   nil,   nil,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    71,    72,    78,   nil,   nil,   654,   102,   nil,   nil,   nil,
   -10,   nil,   nil,   nil ]

racc_action_default = [
  -174,  -174,    -1,  -174,    -4,    -5,    -6,    -7,    -8,    -9,
  -174,   -17,   -29,  -174,   -40,  -174,    -2,    -3,   -51,   -52,
   -54,   -55,   -94,  -174,   -13,  -174,  -174,  -174,   -41,   284,
  -174,  -174,  -174,   -59,   -61,   -63,   -64,  -174,   -50,  -164,
  -174,  -174,   -12,  -174,  -174,  -174,   -37,   -38,   -39,   -43,
   -46,  -164,  -121,  -122,  -125,  -128,  -174,  -130,  -131,  -132,
  -133,  -174,  -135,  -136,  -137,  -139,  -174,  -142,  -143,  -174,
  -145,  -174,  -174,  -174,  -174,  -151,  -152,  -156,  -174,  -174,
  -162,  -163,  -174,  -167,  -168,  -169,  -174,  -171,  -172,  -173,
   -56,  -174,  -174,   -60,   -62,   -65,   -49,   -10,   -11,   -14,
   -18,   -20,   -25,   -22,   -23,   -24,   -30,  -174,  -174,  -174,
   -36,   -71,  -174,  -174,  -174,   -45,  -174,  -174,  -174,  -174,
  -129,  -138,  -174,  -174,  -174,  -174,  -174,  -174,  -174,  -154,
  -155,  -174,  -174,  -166,  -170,   -57,  -174,  -174,  -174,  -174,
   -21,   -26,   -27,   -31,  -174,   -34,  -174,   -73,  -174,   -48,
   -42,   -44,  -123,  -124,  -126,  -127,  -134,  -140,  -141,  -174,
  -174,  -174,  -174,  -174,  -174,  -153,  -157,  -159,  -174,  -161,
  -165,   -58,   -66,   -67,  -174,  -174,   -15,   -16,   -19,   -32,
  -174,  -174,   -88,   -78,  -174,  -174,   -72,   -80,  -174,  -174,
   -97,   -99,  -174,  -102,  -103,  -104,  -106,  -107,  -108,  -109,
  -110,  -111,  -118,  -119,  -120,  -144,  -146,  -147,  -148,  -149,
  -150,  -160,   -68,  -174,   -33,   -35,  -174,   -47,  -174,  -174,
  -174,  -174,  -120,  -174,  -174,  -174,  -174,  -174,  -174,  -174,
  -174,  -174,  -174,  -174,  -174,  -174,   -53,   -93,  -174,  -101,
  -174,   -70,   -96,   -87,   -79,   -74,   -76,   -77,   -28,  -105,
   -98,  -174,  -174,  -174,  -174,  -174,  -174,   -84,   -85,   -90,
  -174,   -92,  -112,  -113,  -114,  -115,  -116,  -117,  -100,   -69,
  -174,  -174,  -174,   -83,   -89,  -174,  -174,   -91,   -95,   -75,
  -174,   -82,   -86,   -81 ]

racc_goto_table = [
    38,    50,   103,   181,    48,   144,    18,   121,   186,   101,
   106,   236,   257,     5,    17,    11,    16,   173,    11,    96,
   154,   155,   240,   246,   152,   153,   241,   245,   250,    18,
   268,   239,   115,    90,   212,   122,   168,    45,   273,   120,
   166,   167,   171,    18,    18,   221,     2,     3,   236,     4,
     6,    97,    98,    24,    42,   100,   140,   255,   107,   259,
    27,   262,   263,   264,   265,   266,   267,   121,   121,   121,
   121,    46,   143,   243,   236,   279,   110,   214,   244,   111,
   147,   183,   145,   272,   217,   274,   237,    50,     1,   172,
   150,   nil,   nil,   nil,   135,    18,   151,   103,   160,   161,
   162,   163,   164,   136,   178,   157,   nil,   281,   nil,   nil,
   nil,   nil,   283,   276,   nil,    18,   nil,   nil,   nil,   nil,
   182,   nil,   nil,   149,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,   222,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   247,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   182,   nil,   nil,   nil,   nil,   242,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   122,   247,
   182,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   278 ]

racc_goto_check = [
    28,    21,    15,    22,    26,    20,    33,    63,    42,    12,
    18,    16,    51,     4,     5,     8,     4,    41,     8,    28,
    64,    64,    43,    46,    62,    62,    44,    45,    55,    33,
    56,    57,    28,    33,    42,    21,    66,     5,    51,    67,
    78,    79,    39,    33,    33,    42,     2,     3,    16,     6,
     7,     5,     5,     9,    10,    11,    14,    49,    19,    49,
    23,    49,    49,    49,    49,    49,    49,    63,    63,    63,
    63,    24,    18,    22,    16,    46,    25,    20,    42,    29,
    30,    31,    21,    49,    32,    49,    35,    21,     1,    40,
    26,   nil,   nil,   nil,    33,    33,    28,    15,    21,    21,
    21,    21,    21,     5,    12,    28,   nil,    49,   nil,   nil,
   nil,   nil,    49,    22,   nil,    33,   nil,   nil,   nil,   nil,
    21,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,    15,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    28 ]

racc_goto_pointer = [
   nil,    88,    46,    47,    13,    11,    49,    50,    15,    42,
    30,    11,   -35,   nil,   -46,   -42,  -178,   nil,   -35,    13,
  -103,   -26,  -143,    46,    44,    30,   -23,   nil,   -18,    33,
   -31,   -66,   -99,     3,   nil,  -103,   nil,   nil,   nil,   -94,
   -47,  -119,  -140,  -191,  -187,  -192,  -196,   nil,   nil,  -168,
   nil,  -214,   nil,   nil,   nil,  -195,  -208,  -161,   nil,   nil,
   nil,   nil,   -92,   -49,   -98,   nil,   -95,   -17,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -91,   -90,
   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   220,   nil,
   nil,   nil,   nil,   102,   nil,    59,   187,    12,   nil,   nil,
   nil,   204,   nil,   nil,   nil,   nil,   nil,    49,    67,   nil,
   nil,   nil,   nil,    68,    19,   258,    20,    21,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   203,   197,   188,
   198,   nil,   199,   200,   201,   190,   191,   193,   194,   195,
   196,   202,    52,    53,    54,    55,    56,    57,    58,    60,
    62,    63,    64,    66,    70,    75,    76,    79,   nil,   nil,
    83,    84,    85 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_none,
  2, 72, :_reduce_2,
  2, 72, :_reduce_3,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  4, 76, :_reduce_10,
  4, 76, :_reduce_11,
  3, 74, :_reduce_12,
  0, 80, :_reduce_none,
  2, 80, :_reduce_14,
  4, 80, :_reduce_15,
  4, 80, :_reduce_16,
  0, 79, :_reduce_none,
  3, 79, :_reduce_18,
  3, 81, :_reduce_19,
  1, 81, :_reduce_none,
  2, 82, :_reduce_21,
  1, 83, :_reduce_none,
  1, 83, :_reduce_23,
  1, 83, :_reduce_24,
  0, 84, :_reduce_25,
  1, 84, :_reduce_26,
  1, 84, :_reduce_27,
  3, 86, :_reduce_28,
  1, 78, :_reduce_none,
  4, 77, :_reduce_30,
  5, 77, :_reduce_31,
  3, 89, :_reduce_32,
  3, 90, :_reduce_33,
  1, 90, :_reduce_none,
  4, 88, :_reduce_35,
  4, 87, :_reduce_36,
  3, 87, :_reduce_37,
  1, 94, :_reduce_38,
  1, 94, :_reduce_39,
  0, 93, :_reduce_none,
  1, 93, :_reduce_41,
  3, 96, :_reduce_42,
  1, 96, :_reduce_none,
  3, 97, :_reduce_44,
  2, 97, :_reduce_45,
  1, 97, :_reduce_none,
  4, 95, :_reduce_47,
  2, 99, :_reduce_48,
  3, 75, :_reduce_49,
  2, 75, :_reduce_50,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 105, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 106, :_reduce_56,
  4, 106, :_reduce_57,
  5, 107, :_reduce_58,
  1, 108, :_reduce_59,
  2, 108, :_reduce_60,
  1, 108, :_reduce_61,
  2, 108, :_reduce_62,
  1, 108, :_reduce_63,
  1, 108, :_reduce_64,
  2, 108, :_reduce_65,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  2, 110, :_reduce_68,
  4, 111, :_reduce_69,
  1, 113, :_reduce_none,
  0, 100, :_reduce_none,
  2, 100, :_reduce_72,
  0, 101, :_reduce_none,
  3, 101, :_reduce_74,
  3, 115, :_reduce_75,
  1, 115, :_reduce_none,
  1, 116, :_reduce_none,
  0, 102, :_reduce_none,
  2, 102, :_reduce_79,
  1, 117, :_reduce_none,
  6, 118, :_reduce_81,
  5, 118, :_reduce_82,
  4, 120, :_reduce_83,
  3, 120, :_reduce_84,
  1, 121, :_reduce_none,
  3, 121, :_reduce_86,
  3, 92, :_reduce_87,
  1, 92, :_reduce_none,
  4, 122, :_reduce_89,
  3, 122, :_reduce_90,
  4, 123, :_reduce_91,
  3, 123, :_reduce_92,
  2, 124, :_reduce_93,
  1, 103, :_reduce_94,
  3, 114, :_reduce_95,
  1, 114, :_reduce_none,
  1, 112, :_reduce_none,
  3, 112, :_reduce_98,
  1, 125, :_reduce_none,
  3, 125, :_reduce_100,
  2, 126, :_reduce_101,
  1, 126, :_reduce_none,
  1, 127, :_reduce_none,
  1, 128, :_reduce_none,
  3, 128, :_reduce_105,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 130, :_reduce_112,
  3, 130, :_reduce_113,
  3, 130, :_reduce_114,
  3, 130, :_reduce_115,
  3, 130, :_reduce_116,
  3, 130, :_reduce_117,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 131, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 132, :_reduce_123,
  3, 132, :_reduce_124,
  1, 132, :_reduce_none,
  3, 134, :_reduce_126,
  3, 134, :_reduce_127,
  1, 134, :_reduce_none,
  2, 135, :_reduce_129,
  1, 135, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 137, :_reduce_134,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 141, :_reduce_139,
  3, 85, :_reduce_140,
  3, 85, :_reduce_141,
  1, 85, :_reduce_none,
  1, 143, :_reduce_none,
  4, 139, :_reduce_144,
  1, 139, :_reduce_none,
  4, 144, :_reduce_146,
  4, 144, :_reduce_147,
  4, 144, :_reduce_148,
  4, 144, :_reduce_149,
  4, 144, :_reduce_150,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  3, 145, :_reduce_153,
  2, 145, :_reduce_154,
  2, 145, :_reduce_155,
  1, 145, :_reduce_156,
  3, 146, :_reduce_157,
  1, 147, :_reduce_none,
  1, 148, :_reduce_none,
  2, 149, :_reduce_160,
  1, 149, :_reduce_161,
  1, 136, :_reduce_162,
  1, 136, :_reduce_163,
  1, 98, :_reduce_164,
  3, 133, :_reduce_165,
  2, 133, :_reduce_166,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 150, :_reduce_none,
  2, 152, :_reduce_170,
  1, 152, :_reduce_171,
  1, 151, :_reduce_172,
  1, 151, :_reduce_173 ]

racc_reduce_n = 174

racc_shift_n = 284

racc_token_table = {
  false => 0,
  :error => 1,
  :EXPLAIN => 2,
  :DESCRIBE => 3,
  :DESC => 4,
  :SHOW => 5,
  :INDEX => 6,
  :FROM => 7,
  :IN => 8,
  :LIMIT => 9,
  :unsigned_integer => 10,
  :comma => 11,
  :OFFSET => 12,
  :ORDER => 13,
  :BY => 14,
  :built_in_function => 15,
  :ASC => 16,
  :left_paren => 17,
  :right_paren => 18,
  :INSERT => 19,
  :INTO => 20,
  :VALUES => 21,
  :SELECT => 22,
  :asterisk => 23,
  :DISTINCT => 24,
  :AS => 25,
  :CROSS => 26,
  :JOIN => 27,
  :INNER => 28,
  :LEFT => 29,
  :OUTER => 30,
  :RIGHT => 31,
  :FULL => 32,
  :ON => 33,
  :USING => 34,
  :WHERE => 35,
  :GROUP => 36,
  :HAVING => 37,
  :NOT => 38,
  :BETWEEN => 39,
  :AND => 40,
  :LIKE => 41,
  :IS => 42,
  :NULL => 43,
  :EXISTS => 44,
  :identifier => 45,
  :OR => 46,
  :equals_operator => 47,
  :not_equals_operator => 48,
  :less_than_operator => 49,
  :greater_than_operator => 50,
  :less_than_or_equals_operator => 51,
  :greater_than_or_equals_operator => 52,
  :plus_sign => 53,
  :minus_sign => 54,
  :solidus => 55,
  :CURRENT_USER => 56,
  :period => 57,
  :COUNT => 58,
  :AVG => 59,
  :MAX => 60,
  :MIN => 61,
  :SUM => 62,
  :E => 63,
  :quote => 64,
  :character_string_literal => 65,
  :DATE => 66,
  :date_string => 67,
  :TRUE => 68,
  :FALSE => 69 }

racc_nt_base = 70

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EXPLAIN",
  "DESCRIBE",
  "DESC",
  "SHOW",
  "INDEX",
  "FROM",
  "IN",
  "LIMIT",
  "unsigned_integer",
  "comma",
  "OFFSET",
  "ORDER",
  "BY",
  "built_in_function",
  "ASC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "TRUE",
  "FALSE",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "explain",
  "direct_select_statement_multiple_rows",
  "table_reference",
  "show_statement",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "limit_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_modifier",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "bool_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 9)
  def _reduce_2(val, _values, result)
     result = SQLParser::Statement::Explain.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 10)
  def _reduce_3(val, _values, result)
     result = SQLParser::Statement::Explain.new(val[1]) 
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::ShowIndex.new(val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::ShowIndex.new(val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_21(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_33(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::Distinct.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_42(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_58(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_75(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_87(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_95(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_105(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_129(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_134(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_160(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::Date.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_172(val, _values, result)
     result = SQLParser::Statement::Bool.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_173(val, _values, result)
     result = SQLParser::Statement::Bool.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
