#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 342)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    44,    95,    95,   224,    67,   107,   235,   153,  -129,    72,
     7,    62,   236,     8,   130,   133,   134,   226,    44,   227,
   228,    70,    71,   138,   139,   229,    69,    69,   160,    87,
    86,   143,   194,    62,   145,   157,    18,    69,    69,  -129,
  -129,  -129,    73,   146,    47,    48,   147,    32,    45,    36,
    38,    39,    40,    41,    18,    49,   148,    52,    47,    48,
   149,    69,    47,    48,   152,    32,    45,    36,    38,    39,
    40,    41,    44,    49,    69,    52,   131,   173,   100,   229,
   174,   175,   176,   177,   178,   179,   180,   118,   182,   100,
    44,   183,    69,   101,    62,   103,   104,    28,   105,   106,
   217,   218,     8,    62,   101,   189,   103,   104,    18,   105,
   106,   190,    62,   194,   110,   206,    47,    48,   209,    32,
    45,    36,    38,    39,    40,    41,    18,    49,    89,    52,
    88,   212,   213,    99,    47,    48,    85,    32,    45,    36,
    38,    39,    40,    41,    44,    49,   100,    52,    18,   223,
    84,    28,    98,   118,    83,   136,    99,    14,  -148,   231,
    82,   101,    44,   103,   104,    81,   105,   106,    80,    28,
    79,    78,   195,   196,     8,   197,   198,   199,    77,   135,
    18,   -85,   200,   201,   202,   203,   204,   205,    47,    48,
     8,    32,    45,    36,    38,    39,    40,    41,    18,    49,
    66,    52,    65,   126,   246,   194,    47,    48,   247,    32,
    45,    36,    38,    39,    40,    41,    44,    49,   209,    52,
    56,   231,    55,   229,    53,   251,    12,   253,   194,    69,
    18,   258,    11,   260,    44,   261,   262,     9,    69,   nil,
   nil,   229,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,   nil,    32,    45,    36,    38,    39,    40,    41,
    18,    49,   nil,    52,   nil,   nil,   nil,   nil,    47,    48,
   nil,    32,    45,    36,    38,    39,    40,    41,    44,    49,
   nil,    52,   nil,   nil,   nil,   153,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,   nil,
   nil,   nil,   nil,    28,   nil,   nil,   160,   nil,   nil,   nil,
   nil,   nil,   nil,   157,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,    39,
    40,    41,    18,    49,   nil,    52,   nil,   nil,   nil,   nil,
    47,    48,   nil,    32,    45,    36,    38,    39,    40,    41,
    44,    49,   nil,    52,   nil,   nil,   nil,   153,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,
   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,   160,   nil,
   nil,   nil,   nil,   nil,   nil,   157,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,
    38,    39,    40,    41,    18,    49,   nil,    52,   nil,   nil,
   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,    39,
    40,    41,    44,    49,   nil,    52,   nil,   nil,   nil,   229,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    44,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,    18,    49,   nil,    52,
   nil,   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,
    38,    39,    40,    41,    44,    49,   nil,    52,   nil,   nil,
   nil,   229,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    44,   nil,   nil,   nil,   nil,   nil,   nil,    28,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
   nil,    32,    45,    36,    38,    39,    40,    41,    18,    49,
   nil,    52,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,    44,    49,   nil,    52,
   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   229,   nil,    32,    45,    36,    38,    39,    40,    41,
    18,    49,   nil,    52,   nil,   nil,   nil,   nil,    47,    48,
   nil,    32,    45,    36,    38,    39,    40,    41,    44,    49,
    18,    52,   nil,   nil,   nil,   229,   nil,   nil,    47,    48,
   nil,    32,    45,    36,    38,    39,    40,    41,    44,    49,
   nil,    52,   nil,   nil,   nil,   229,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,    39,
    40,    41,    44,    49,    18,    52,   nil,   nil,   nil,   229,
   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,    39,
    40,    41,    44,    49,   nil,    52,   nil,   nil,   nil,    28,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,    44,    49,    18,    52,
   nil,   nil,   nil,   229,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,    44,    49,   nil,    52,
   nil,   nil,   nil,   229,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,   nil,    32,    45,    36,    38,    39,    40,    41,
    44,    49,    18,    52,   nil,   nil,   nil,    28,   nil,   nil,
    47,    48,   nil,    32,    45,    36,    38,    39,    40,    41,
    44,    49,   nil,    52,   nil,   nil,   nil,    28,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,
    38,    39,    40,    41,    44,    49,    18,    52,   nil,   nil,
   nil,   153,   nil,   nil,    47,    48,   nil,    32,    45,    36,
    38,    39,    40,    41,    44,    49,   nil,    52,   nil,   nil,
   nil,    28,   160,   nil,   nil,   nil,   nil,   120,   nil,   157,
    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
   nil,    32,    45,    36,    38,    39,    40,    41,    44,    49,
    18,    52,   nil,   nil,   nil,    28,   nil,   nil,    47,    48,
   nil,    32,    45,    36,    38,    39,    40,    41,   nil,    49,
   nil,    52,    44,   nil,   nil,   nil,   nil,   nil,   nil,   153,
   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,    39,
    40,    41,    44,    49,   nil,    52,   nil,   157,    18,   153,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,    44,    49,   nil,    52,
   160,   nil,   nil,    28,   nil,   nil,   nil,   157,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,    44,    49,   nil,    52,
   nil,   nil,    18,    28,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,   nil,    32,    45,    36,    38,    39,    40,    41,
    44,    49,   nil,    52,   nil,   nil,   nil,    28,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,   nil,    32,    45,    36,    38,    39,    40,    41,
    44,    49,   nil,    52,   nil,   nil,    18,   153,   nil,   nil,
   nil,   nil,     8,   nil,    47,    48,   nil,    32,    45,    36,
    38,    39,    40,    41,    44,    49,   nil,    52,   160,   nil,
   nil,    28,   nil,   nil,   nil,   157,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,
    38,    39,    40,    41,    44,    49,   nil,    52,   nil,   nil,
    18,    28,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
   nil,    32,    45,    36,    38,    39,    40,    41,   nil,    49,
   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
   nil,    32,    45,    36,    38,    39,    40,    41,   nil,    49,
   nil,    52 ]

racc_action_check = [
   194,    56,   136,   192,    17,    58,   199,   194,    20,    22,
     0,    12,   199,     0,    85,    89,    89,   195,   258,   195,
   195,    21,    21,    93,    93,   258,    17,    58,   194,    49,
    49,    99,   192,   100,   101,   194,   194,    56,   136,    20,
    20,    20,    22,   102,   194,   194,   104,   194,   194,   194,
   194,   194,   194,   194,   258,   194,   105,   194,    85,    85,
   106,   107,   258,   258,   109,   258,   258,   258,   258,   258,
   258,   258,   251,   258,    77,   258,    86,   120,   187,   251,
   121,   122,   123,   124,   125,   129,   134,    76,   141,   111,
   231,   142,    67,   187,   145,   187,   187,   231,   187,   187,
   187,   187,   231,   146,   111,   151,   111,   111,   251,   111,
   111,   152,    65,   154,    64,   157,   251,   251,   158,   251,
   251,   251,   251,   251,   251,   251,   231,   251,    55,   251,
    52,   184,   185,    97,   231,   231,    46,   231,   231,   231,
   231,   231,   231,   231,     8,   231,    57,   231,   190,   191,
    45,     8,    57,   193,    44,    91,    57,     8,    42,   197,
    41,    57,   229,    57,    57,    40,    57,    57,    39,   229,
    38,    36,   156,   156,   229,   156,   156,   156,    33,    90,
     8,    18,   156,   156,   156,   156,   156,   156,     8,     8,
   206,     8,     8,     8,     8,     8,     8,     8,   229,     8,
    16,     8,    13,    83,   218,   219,   229,   229,   220,   229,
   229,   229,   229,   229,   229,   229,   228,   229,   225,   229,
    11,   227,    10,   228,     9,   230,     7,   235,   245,   246,
   247,   248,     5,   252,   226,   254,   255,     1,   262,   nil,
   nil,   226,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   228,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   228,   228,   nil,   228,   228,   228,   228,   228,   228,   228,
   226,   228,   nil,   228,   nil,   nil,   nil,   nil,   226,   226,
   nil,   226,   226,   226,   226,   226,   226,   226,   217,   226,
   nil,   226,   nil,   nil,   nil,   217,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   213,   nil,   nil,   nil,
   nil,   nil,   nil,   213,   nil,   nil,   217,   nil,   nil,   nil,
   nil,   nil,   nil,   217,   217,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   217,   217,   nil,   217,   217,   217,   217,   217,
   217,   217,   213,   217,   nil,   217,   nil,   nil,   nil,   nil,
   213,   213,   nil,   213,   213,   213,   213,   213,   213,   213,
   209,   213,   nil,   213,   nil,   nil,   nil,   209,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    98,   nil,
   nil,   nil,   nil,   nil,   nil,    98,   nil,   nil,   209,   nil,
   nil,   nil,   nil,   nil,   nil,   209,   209,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   209,   209,   nil,   209,   209,   209,
   209,   209,   209,   209,    98,   209,   nil,   209,   nil,   nil,
   nil,   nil,    98,    98,   nil,    98,    98,    98,    98,    98,
    98,    98,   205,    98,   nil,    98,   nil,   nil,   nil,   205,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    82,   nil,   nil,   nil,   nil,   nil,   nil,    82,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   205,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   205,   205,   nil,   205,
   205,   205,   205,   205,   205,   205,    82,   205,   nil,   205,
   nil,   nil,   nil,   nil,    82,    82,   nil,    82,    82,    82,
    82,    82,    82,    82,   204,    82,   nil,    82,   nil,   nil,
   nil,   204,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    81,   nil,   nil,   nil,   nil,   nil,   nil,    81,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   204,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   204,   204,
   nil,   204,   204,   204,   204,   204,   204,   204,    81,   204,
   nil,   204,   nil,   nil,   nil,   nil,    81,    81,   nil,    81,
    81,    81,    81,    81,    81,    81,    23,    81,   nil,    81,
   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,
   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,   nil,   203,   nil,   nil,   nil,   nil,   nil,
   nil,   203,   nil,    23,    23,    23,    23,    23,    23,    23,
    28,    23,   nil,    23,   nil,   nil,   nil,   nil,    28,    28,
   nil,    28,    28,    28,    28,    28,    28,    28,   202,    28,
   203,    28,   nil,   nil,   nil,   202,   nil,   nil,   203,   203,
   nil,   203,   203,   203,   203,   203,   203,   203,   201,   203,
   nil,   203,   nil,   nil,   nil,   201,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   202,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   202,   202,   nil,   202,   202,   202,   202,   202,
   202,   202,   200,   202,   201,   202,   nil,   nil,   nil,   200,
   nil,   nil,   201,   201,   nil,   201,   201,   201,   201,   201,
   201,   201,    80,   201,   nil,   201,   nil,   nil,   nil,    80,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   200,   200,   nil,   200,
   200,   200,   200,   200,   200,   200,   198,   200,    80,   200,
   nil,   nil,   nil,   198,   nil,   nil,    80,    80,   nil,    80,
    80,    80,    80,    80,    80,    80,   196,    80,   nil,    80,
   nil,   nil,   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   198,   198,   nil,   198,   198,   198,   198,   198,   198,   198,
    70,   198,   196,   198,   nil,   nil,   nil,    70,   nil,   nil,
   196,   196,   nil,   196,   196,   196,   196,   196,   196,   196,
    79,   196,   nil,   196,   nil,   nil,   nil,    79,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    70,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    70,    70,   nil,    70,    70,    70,
    70,    70,    70,    70,   189,    70,    79,    70,   nil,   nil,
   nil,   189,   nil,   nil,    79,    79,   nil,    79,    79,    79,
    79,    79,    79,    79,    78,    79,   nil,    79,   nil,   nil,
   nil,    78,   189,   nil,   nil,   nil,   nil,    78,   nil,   189,
   189,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   189,   189,
   nil,   189,   189,   189,   189,   189,   189,   189,   183,   189,
    78,   189,   nil,   nil,   nil,   183,   nil,   nil,    78,    78,
   nil,    78,    78,    78,    78,    78,    78,    78,   nil,    78,
   nil,    78,   160,   nil,   nil,   nil,   nil,   nil,   nil,   160,
   nil,   nil,   nil,   nil,   183,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   183,   183,   nil,   183,   183,   183,   183,   183,
   183,   183,   110,   183,   nil,   183,   nil,   160,   160,   110,
   nil,   nil,   nil,   nil,   nil,   nil,   160,   160,   nil,   160,
   160,   160,   160,   160,   160,   160,    73,   160,   nil,   160,
   110,   nil,   nil,    73,   nil,   nil,   nil,   110,   110,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   110,   110,   nil,   110,
   110,   110,   110,   110,   110,   110,    72,   110,   nil,   110,
   nil,   nil,    73,    72,   nil,   nil,   nil,   nil,   nil,   nil,
    73,    73,   nil,    73,    73,    73,    73,    73,    73,    73,
    71,    73,   nil,    73,   nil,   nil,   nil,    71,   nil,   nil,
   nil,   nil,    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    72,    72,   nil,    72,    72,    72,    72,    72,    72,    72,
   153,    72,   nil,    72,   nil,   nil,    71,   153,   nil,   nil,
   nil,   nil,   153,   nil,    71,    71,   nil,    71,    71,    71,
    71,    71,    71,    71,    66,    71,   nil,    71,   153,   nil,
   nil,    66,   nil,   nil,   nil,   153,   153,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   153,   153,   nil,   153,   153,   153,
   153,   153,   153,   153,   143,   153,   nil,   153,   nil,   nil,
    66,   143,   nil,   nil,   nil,   nil,   nil,   nil,    66,    66,
   nil,    66,    66,    66,    66,    66,    66,    66,   nil,    66,
   nil,    66,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   143,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   143,   143,
   nil,   143,   143,   143,   143,   143,   143,   143,   nil,   143,
   nil,   143 ]

racc_action_pointer = [
    -2,   237,   nil,   nil,   nil,   226,   nil,   213,   141,   224,
   220,   213,   -28,   184,   nil,   nil,   196,   -13,   130,   nil,
    -8,   -26,    -7,   573,   nil,   nil,   nil,   nil,   591,   nil,
   nil,   nil,   nil,   127,   nil,   nil,   161,   nil,   160,   158,
   155,   150,   101,   nil,   103,   147,    79,   nil,   nil,   -29,
   nil,   nil,    69,   nil,   nil,   125,    -2,   142,   -12,   nil,
   nil,   nil,   nil,   nil,    86,    73,  1101,    53,   nil,   nil,
   807,  1047,  1023,   993,   nil,   nil,    76,    35,   881,   827,
   719,   519,   447,   200,   nil,    11,    18,   nil,   nil,    11,
   176,   151,   nil,    15,   nil,   nil,   nil,   119,   375,    21,
    -6,    14,    23,   nil,    23,    33,    37,    22,   nil,    35,
   969,    85,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    66,    69,    70,    71,    72,    73,   nil,   nil,   nil,    82,
   nil,   nil,   nil,   nil,    83,   nil,    -1,   nil,   nil,   nil,
   nil,    77,    87,  1131,   nil,    55,    64,   nil,   nil,   nil,
   nil,    75,   104,  1077,    73,   nil,   141,   105,    85,   nil,
   939,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   915,   120,   128,   nil,    74,   nil,   861,
   109,   138,    -8,   142,    -3,   -15,   773,   149,   753,   -25,
   699,   665,   645,   611,   501,   429,   175,   nil,   nil,   357,
   nil,   nil,   nil,   303,   nil,   nil,   nil,   285,   194,   165,
   204,   nil,   nil,   nil,   nil,   185,   231,   211,   213,   159,
   192,    87,   nil,   nil,   nil,   190,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   188,   190,   191,   198,   nil,
   nil,    69,   222,   nil,   224,   232,   nil,   nil,    15,   nil,
   nil,   nil,   199,   nil,   nil ]

racc_action_default = [
  -160,  -160,    -1,    -2,    -3,   -11,   -22,  -160,  -160,  -160,
    -5,  -160,  -160,   -30,   -31,   -32,   -34,   -37,  -154,  -112,
  -113,  -116,  -119,  -160,  -121,  -122,  -123,  -124,  -160,  -126,
  -127,  -128,  -130,  -160,  -132,  -133,  -160,  -135,  -160,  -160,
  -160,  -160,  -141,  -142,  -146,  -160,  -160,  -152,  -153,  -160,
  -157,  -158,  -160,   265,    -4,  -160,  -160,  -160,   -42,   -43,
   -45,   -46,   -85,   -29,   -62,  -160,  -160,  -160,   -36,  -154,
  -160,  -160,  -160,  -160,  -120,  -129,  -160,  -160,  -160,  -160,
  -160,  -160,  -160,  -144,  -145,  -160,  -160,  -156,  -159,    -6,
  -160,   -12,   -14,   -18,   -16,   -17,   -23,  -160,  -160,  -160,
  -160,  -160,  -160,   -50,   -52,   -54,   -55,  -160,   -41,   -64,
  -160,   -39,   -33,   -35,  -114,  -115,  -117,  -118,  -125,  -131,
  -160,  -160,  -160,  -160,  -160,  -160,  -143,  -147,  -149,  -160,
  -151,  -155,    -8,    -9,  -160,    -7,  -160,   -15,   -19,   -20,
   -24,  -160,   -27,  -160,   -47,  -160,  -160,   -51,   -53,   -56,
   -40,   -69,  -160,  -160,   -63,   -71,  -160,  -160,   -88,   -90,
  -160,   -93,   -94,   -95,   -97,   -98,   -99,  -100,  -101,  -102,
  -109,  -110,  -111,  -134,  -136,  -137,  -138,  -139,  -140,  -150,
   -10,   -13,   -25,  -160,  -160,   -79,   -48,  -160,   -38,  -160,
  -160,  -160,  -160,  -111,  -160,  -160,  -160,  -160,  -160,  -160,
  -160,  -160,  -160,  -160,  -160,  -160,  -160,   -44,   -84,  -160,
   -92,   -26,   -28,  -160,   -49,   -57,   -58,  -160,  -160,   -70,
   -65,   -67,   -68,   -21,   -96,   -89,  -160,  -160,  -160,  -160,
  -160,  -160,   -75,   -76,   -81,  -160,   -83,  -103,  -104,  -105,
  -106,  -107,  -108,   -91,   -78,   -59,  -160,  -160,  -160,   -74,
   -80,  -160,  -160,   -82,  -160,   -61,   -87,   -66,  -160,   -73,
   -77,   -60,  -160,   -72,   -86 ]

racc_goto_table = [
    68,    17,   154,   141,    58,    57,   184,    92,   207,    15,
   232,   222,   221,    96,    75,   116,   117,   114,   115,   151,
   137,    76,   230,    13,   234,    63,   237,   238,   239,   240,
   241,   242,     1,    64,   109,    97,   188,    91,   208,    94,
   249,   108,   214,   215,   216,   192,   132,   254,   207,   255,
   113,   220,   248,   140,   250,    90,    54,    58,   111,    17,
   119,    75,    75,    75,    75,    10,     5,   112,   222,   257,
   225,   121,   122,   123,   124,   125,   244,   259,   207,   243,
   210,   219,     4,     3,   263,     2,   129,   181,   211,    74,
   150,   142,   144,   127,   252,   128,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   245,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    94,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   185,   186,    58,   187,
   nil,   nil,   nil,   nil,   nil,   nil,   193,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   142,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    76,   nil,   185,   nil,   nil,   nil,   nil,   256,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   264 ]

racc_goto_check = [
    14,    21,    40,    20,    31,    17,    22,    11,    15,    25,
    50,    45,    44,    18,    62,    63,    63,    61,    61,    29,
    13,    21,    48,    23,    48,    24,    48,    48,    48,    48,
    48,    48,     1,    27,    28,    19,    30,    10,    33,    14,
    50,    14,    37,    38,    39,    40,     9,    41,    15,    42,
    14,    43,    48,    18,    48,     8,     7,    31,    17,    21,
    14,    62,    62,    62,    62,     6,     5,    25,    45,    44,
    54,    21,    21,    21,    21,    21,    22,    48,    15,    55,
    56,    40,     4,     3,    48,     2,    65,    11,    20,    66,
    14,    21,    31,    77,    22,    78,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,    31,    31,    17,
   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,    21,   nil,   nil,   nil,   nil,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    14 ]

racc_goto_pointer = [
   nil,    32,    85,    83,    82,    66,    60,    46,     0,   -43,
   -19,   -49,   nil,   -73,   -17,  -149,   nil,    -7,   -44,   -22,
   -95,    -7,  -137,    15,    12,     1,   nil,    20,   -30,   -90,
  -115,    -8,   nil,  -119,   nil,   nil,   nil,  -145,  -144,  -143,
  -108,  -199,  -197,  -139,  -178,  -179,   nil,   nil,  -174,   nil,
  -187,   nil,   nil,   nil,  -124,  -130,   -80,   nil,   nil,   nil,
   nil,   -53,    -9,   -57,   nil,     1,    66,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,    10,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,
   nil,   nil,    93,   nil,    34,   155,     6,   nil,   nil,   nil,
   nil,   172,   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,
   nil,    35,    59,   233,    60,    61,   102,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   171,   165,   156,   166,
   nil,   167,   168,   169,   158,   159,   161,   162,   163,   164,
   170,    19,    20,    21,    22,    23,    24,    25,    27,    29,
    30,    31,    33,    37,    42,    43,    46,   nil,   nil,    50,
    51 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 63, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  3, 65, :_reduce_4,
  0, 69, :_reduce_none,
  2, 69, :_reduce_6,
  3, 69, :_reduce_7,
  3, 69, :_reduce_8,
  2, 70, :_reduce_9,
  2, 71, :_reduce_10,
  0, 68, :_reduce_none,
  3, 68, :_reduce_12,
  3, 72, :_reduce_13,
  1, 72, :_reduce_none,
  2, 73, :_reduce_15,
  1, 74, :_reduce_none,
  1, 74, :_reduce_17,
  0, 75, :_reduce_18,
  1, 75, :_reduce_19,
  1, 75, :_reduce_20,
  3, 77, :_reduce_21,
  1, 67, :_reduce_none,
  4, 66, :_reduce_23,
  5, 66, :_reduce_24,
  3, 81, :_reduce_25,
  3, 82, :_reduce_26,
  1, 82, :_reduce_none,
  4, 80, :_reduce_28,
  3, 78, :_reduce_29,
  2, 78, :_reduce_30,
  1, 85, :_reduce_31,
  1, 85, :_reduce_32,
  3, 87, :_reduce_33,
  1, 87, :_reduce_none,
  3, 88, :_reduce_35,
  2, 88, :_reduce_36,
  1, 88, :_reduce_none,
  4, 86, :_reduce_38,
  2, 89, :_reduce_39,
  3, 79, :_reduce_40,
  2, 79, :_reduce_41,
  1, 79, :_reduce_none,
  1, 79, :_reduce_none,
  1, 95, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  3, 96, :_reduce_47,
  4, 96, :_reduce_48,
  5, 97, :_reduce_49,
  1, 98, :_reduce_50,
  2, 98, :_reduce_51,
  1, 98, :_reduce_52,
  2, 98, :_reduce_53,
  1, 98, :_reduce_54,
  1, 98, :_reduce_55,
  2, 98, :_reduce_56,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  2, 100, :_reduce_59,
  4, 101, :_reduce_60,
  1, 103, :_reduce_none,
  0, 90, :_reduce_none,
  2, 90, :_reduce_63,
  0, 91, :_reduce_none,
  3, 91, :_reduce_65,
  3, 105, :_reduce_66,
  1, 105, :_reduce_none,
  1, 106, :_reduce_none,
  0, 92, :_reduce_none,
  2, 92, :_reduce_70,
  1, 108, :_reduce_none,
  6, 109, :_reduce_72,
  5, 109, :_reduce_73,
  4, 111, :_reduce_74,
  3, 111, :_reduce_75,
  1, 112, :_reduce_none,
  3, 112, :_reduce_77,
  3, 84, :_reduce_78,
  1, 84, :_reduce_none,
  4, 113, :_reduce_80,
  3, 113, :_reduce_81,
  4, 114, :_reduce_82,
  3, 114, :_reduce_83,
  2, 115, :_reduce_84,
  1, 93, :_reduce_85,
  3, 104, :_reduce_86,
  1, 104, :_reduce_none,
  1, 102, :_reduce_none,
  3, 102, :_reduce_89,
  1, 116, :_reduce_none,
  3, 116, :_reduce_91,
  2, 117, :_reduce_92,
  1, 117, :_reduce_none,
  1, 118, :_reduce_none,
  1, 119, :_reduce_none,
  3, 119, :_reduce_96,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  3, 121, :_reduce_103,
  3, 121, :_reduce_104,
  3, 121, :_reduce_105,
  3, 121, :_reduce_106,
  3, 121, :_reduce_107,
  3, 121, :_reduce_108,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 122, :_reduce_none,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  3, 123, :_reduce_114,
  3, 123, :_reduce_115,
  1, 123, :_reduce_none,
  3, 125, :_reduce_117,
  3, 125, :_reduce_118,
  1, 125, :_reduce_none,
  2, 126, :_reduce_120,
  1, 126, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  3, 128, :_reduce_125,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 132, :_reduce_130,
  3, 107, :_reduce_131,
  1, 107, :_reduce_none,
  1, 134, :_reduce_none,
  4, 130, :_reduce_134,
  1, 130, :_reduce_none,
  4, 135, :_reduce_136,
  4, 135, :_reduce_137,
  4, 135, :_reduce_138,
  4, 135, :_reduce_139,
  4, 135, :_reduce_140,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  3, 136, :_reduce_143,
  2, 136, :_reduce_144,
  2, 136, :_reduce_145,
  1, 136, :_reduce_146,
  3, 137, :_reduce_147,
  1, 138, :_reduce_none,
  1, 139, :_reduce_none,
  2, 140, :_reduce_150,
  1, 140, :_reduce_151,
  1, 127, :_reduce_152,
  1, 127, :_reduce_153,
  1, 76, :_reduce_154,
  3, 124, :_reduce_155,
  2, 124, :_reduce_156,
  1, 124, :_reduce_none,
  1, 141, :_reduce_none,
  2, 142, :_reduce_159 ]

racc_reduce_n = 160

racc_shift_n = 265

racc_token_table = {
  false => 0,
  :error => 1,
  :LIMIT => 2,
  :unsigned_integer => 3,
  :comma => 4,
  :OFFSET => 5,
  :ORDER => 6,
  :BY => 7,
  :ASC => 8,
  :DESC => 9,
  :left_paren => 10,
  :right_paren => 11,
  :INSERT => 12,
  :INTO => 13,
  :VALUES => 14,
  :SELECT => 15,
  :asterisk => 16,
  :AS => 17,
  :FROM => 18,
  :CROSS => 19,
  :JOIN => 20,
  :INNER => 21,
  :LEFT => 22,
  :OUTER => 23,
  :RIGHT => 24,
  :FULL => 25,
  :ON => 26,
  :USING => 27,
  :WHERE => 28,
  :GROUP => 29,
  :HAVING => 30,
  :NOT => 31,
  :BETWEEN => 32,
  :AND => 33,
  :IN => 34,
  :LIKE => 35,
  :IS => 36,
  :NULL => 37,
  :EXISTS => 38,
  :identifier => 39,
  :OR => 40,
  :equals_operator => 41,
  :not_equals_operator => 42,
  :less_than_operator => 43,
  :greater_than_operator => 44,
  :less_than_or_equals_operator => 45,
  :greater_than_or_equals_operator => 46,
  :plus_sign => 47,
  :minus_sign => 48,
  :solidus => 49,
  :CURRENT_USER => 50,
  :period => 51,
  :COUNT => 52,
  :AVG => 53,
  :MAX => 54,
  :MIN => 55,
  :SUM => 56,
  :E => 57,
  :quote => 58,
  :character_string_literal => 59,
  :DATE => 60,
  :date_string => 61 }

racc_nt_base = 62

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LIMIT",
  "unsigned_integer",
  "comma",
  "OFFSET",
  "ORDER",
  "BY",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "limit_clause",
  "offset_prepend",
  "offset_append",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_7(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[2], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_10(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_13(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_15(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_26(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_33(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_49(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_66(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_78(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_86(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_96(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 116 omitted

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_120(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_150(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
