#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 349)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    58,    77,    77,   100,   235,    82,    76,    76,    42,  -131,
   246,   145,   237,   206,   238,   239,   247,   210,    58,   121,
   122,   222,    83,    96,    85,    86,    42,    87,    88,   202,
   203,   225,    28,   229,   210,    91,    58,   101,    32,    32,
    32,  -131,  -131,  -131,    42,    91,    61,    62,    32,    46,
    59,    50,    52,    53,    54,    55,    32,    63,   156,    67,
    68,    69,    70,   234,    61,    62,   143,    46,    59,    50,
    52,    53,    54,    55,    32,    63,    58,    67,    68,    69,
    70,    89,    61,    62,    42,    46,    59,    50,    52,    53,
    54,    55,   242,    63,    58,    67,    68,    69,    70,   117,
   118,     3,    42,    91,    61,    62,    98,    99,   115,   114,
     9,   210,    58,     8,    32,    91,     9,   258,   225,   242,
    42,   262,    61,    62,   264,    46,    59,    50,    52,    53,
    54,    55,    32,    63,   265,    67,    68,    69,    70,   266,
    61,    62,    32,    46,    59,    50,    52,    53,    54,    55,
    32,    63,    58,    67,    68,    69,    70,   268,    61,    62,
    42,    46,    59,    50,    52,    53,    54,    55,   270,    63,
    58,    67,    68,    69,    70,    91,   210,    10,   240,     9,
    13,    14,    16,    17,    19,    20,    26,    71,    58,    94,
    32,    95,   -87,   105,   106,   107,    42,   108,    61,    62,
   109,    46,    59,    50,    52,    53,    54,    55,    32,    63,
   110,    67,    68,    69,    70,  -151,    61,    62,   111,    46,
    59,    50,    52,    53,    54,    55,    32,    63,    58,    67,
    68,    69,    70,   112,    61,    62,   240,    46,    59,    50,
    52,    53,    54,    55,   113,    63,    58,    67,    68,    69,
    70,   116,   119,    81,   240,   126,    26,   128,   129,   130,
   131,   132,    91,   135,    58,    26,    32,    91,   143,   152,
   157,   158,   240,   159,    61,    62,   161,    46,    59,    50,
    52,    53,    54,    55,    32,    63,   162,    67,    68,    69,
    70,    26,    61,    62,    26,    46,    59,    50,    52,    53,
    54,    55,    32,    63,    58,    67,    68,    69,    70,   168,
    61,    62,   240,    46,    59,    50,    52,    53,    54,    55,
   189,    63,    58,    67,    68,    69,    70,   190,   191,   192,
   240,   193,   194,   195,   197,   198,   205,   nil,   nil,   nil,
    58,   nil,    32,   nil,   nil,   nil,   nil,   nil,   240,   nil,
    61,    62,   nil,    46,    59,    50,    52,    53,    54,    55,
    32,    63,   nil,    67,    68,    69,    70,   nil,    61,    62,
   nil,    46,    59,    50,    52,    53,    54,    55,    32,    63,
    58,    67,    68,    69,    70,   nil,    61,    62,   240,    46,
    59,    50,    52,    53,    54,    55,   nil,    63,   nil,    67,
    68,    69,    70,   nil,   nil,   nil,    58,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   169,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    61,    62,    82,    46,
    59,    50,    52,    53,    54,    55,   176,    63,    58,    67,
    68,    69,    70,   173,    32,    83,   240,    85,    86,   nil,
    87,    88,    61,    62,   nil,    46,    59,    50,    52,    53,
    54,    55,   nil,    63,    58,    67,    68,    69,    70,   nil,
   nil,   nil,    42,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    61,    62,   nil,    46,    59,    50,
    52,    53,    54,    55,   nil,    63,    58,    67,    68,    69,
    70,   nil,    32,   nil,   240,   nil,   nil,   nil,   nil,   nil,
    61,    62,   nil,    46,    59,    50,    52,    53,    54,    55,
   nil,    63,    58,    67,    68,    69,    70,   nil,   nil,   nil,
    42,   nil,   nil,   nil,    32,     9,   nil,   nil,   nil,   nil,
   nil,   nil,    61,    62,   nil,    46,    59,    50,    52,    53,
    54,    55,   nil,    63,    58,    67,    68,    69,    70,   nil,
    32,   nil,    42,   nil,   nil,   nil,   nil,     9,    61,    62,
   nil,    46,    59,    50,    52,    53,    54,    55,   nil,    63,
    58,    67,    68,    69,    70,   nil,   nil,   nil,    42,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    61,    62,   nil,    46,    59,    50,    52,    53,    54,    55,
   nil,    63,    58,    67,    68,    69,    70,   nil,    32,   nil,
    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,
    59,    50,    52,    53,    54,    55,   nil,    63,    58,    67,
    68,    69,    70,   nil,   nil,   nil,   169,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    61,    62,
   nil,    46,    59,    50,    52,    53,    54,    55,   176,    63,
    58,    67,    68,    69,    70,   173,    32,   nil,   240,   nil,
   nil,   nil,   nil,   nil,    61,    62,   nil,    46,    59,    50,
    52,    53,    54,    55,   nil,    63,    58,    67,    68,    69,
    70,   nil,   nil,   nil,   240,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    61,    62,   nil,    46,
    59,    50,    52,    53,    54,    55,   nil,    63,   nil,    67,
    68,    69,    70,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    61,    62,   nil,    46,    59,    50,    52,    53,
    54,    55,    58,    63,   nil,    67,    68,    69,    70,   nil,
   169,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
    58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,
   nil,   nil,   176,   nil,   146,   nil,   nil,   nil,    58,   173,
    32,   nil,   nil,   nil,   nil,   nil,    42,   nil,    61,    62,
   nil,    46,    59,    50,    52,    53,    54,    55,    32,    63,
   nil,    67,    68,    69,    70,   nil,    61,    62,   nil,    46,
    59,    50,    52,    53,    54,    55,    32,    63,    58,    67,
    68,    69,    70,   nil,    61,    62,    42,    46,    59,    50,
    52,    53,    54,    55,   nil,    63,   nil,    67,    68,    69,
    70,   nil,   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   169,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    61,    62,   nil,    46,    59,    50,
    52,    53,    54,    55,   nil,    63,    58,    67,    68,    69,
    70,   173,    32,   nil,    42,   nil,   nil,   nil,   nil,   nil,
    61,    62,   nil,    46,    59,    50,    52,    53,    54,    55,
   nil,    63,    58,    67,    68,    69,    70,   nil,   nil,   nil,
   169,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    61,    62,   nil,    46,    59,    50,    52,    53,
    54,    55,   176,    63,    58,    67,    68,    69,    70,   173,
    32,   nil,    42,   nil,   nil,   nil,   nil,   nil,    61,    62,
   nil,    46,    59,    50,    52,    53,    54,    55,   nil,    63,
    58,    67,    68,    69,    70,   nil,   nil,   nil,   169,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    61,    62,   nil,    46,    59,    50,    52,    53,    54,    55,
   176,    63,    58,    67,    68,    69,    70,   173,    32,   nil,
    42,   nil,   nil,   nil,   nil,   nil,    61,    62,   nil,    46,
    59,    50,    52,    53,    54,    55,   nil,    63,    58,    67,
    68,    69,    70,   nil,   nil,   nil,   169,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    61,    62,
   nil,    46,    59,    50,    52,    53,    54,    55,   176,    63,
   nil,    67,    68,    69,    70,   173,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    61,    62,   nil,    46,    59,    50,
    52,    53,    54,    55,    82,    63,   nil,    67,    68,    69,
    70,    80,   nil,   nil,   nil,    81,   nil,   nil,   nil,   nil,
   nil,    83,   nil,    85,    86,   nil,    87,    88,   211,   212,
   nil,   213,   214,   215,   nil,   nil,   nil,   nil,   216,   217,
   218,   219,   220,   221 ]

racc_action_check = [
    95,   119,    20,    36,   208,   166,   119,    20,    95,    34,
   215,   105,   211,   168,   211,   211,   215,   170,    15,    74,
    74,   173,   166,    31,   166,   166,    15,   166,   166,   166,
   166,   174,    15,   203,   208,   105,    98,    36,    95,   119,
    20,    34,    34,    34,    98,    31,    95,    95,   206,    95,
    95,    95,    95,    95,    95,    95,    15,    95,   113,    95,
    95,    95,    95,   207,    15,    15,   209,    15,    15,    15,
    15,    15,    15,    15,    98,    15,    99,    15,    15,    15,
    15,    22,    98,    98,    99,    98,    98,    98,    98,    98,
    98,    98,   213,    98,   162,    98,    98,    98,    98,    71,
    71,     0,   162,    22,   113,   113,    35,    35,    63,    63,
   222,   228,   100,     0,    99,   229,     0,   231,   236,   238,
   100,   241,    99,    99,   246,    99,    99,    99,    99,    99,
    99,    99,   162,    99,   255,    99,    99,    99,    99,   256,
   162,   162,   258,   162,   162,   162,   162,   162,   162,   162,
   100,   162,   101,   162,   162,   162,   162,   259,   100,   100,
   101,   100,   100,   100,   100,   100,   100,   100,   263,   100,
   212,   100,   100,   100,   100,   266,   230,     1,   212,     3,
     6,     8,     9,    10,    12,    13,    14,    19,    80,    27,
   101,    30,    32,    47,    50,    52,    80,    53,   101,   101,
    54,   101,   101,   101,   101,   101,   101,   101,   212,   101,
    55,   101,   101,   101,   101,    56,   212,   212,    58,   212,
   212,   212,   212,   212,   212,   212,    80,   212,   214,   212,
   212,   212,   212,    59,    80,    80,   214,    80,    80,    80,
    80,    80,    80,    80,    60,    80,   216,    80,    80,    80,
    80,    67,    72,    79,   216,    81,    82,    83,    84,    86,
    87,    88,    89,    93,   217,    94,   214,    96,   104,   111,
   114,   117,   217,   118,   214,   214,   124,   214,   214,   214,
   214,   214,   214,   214,   216,   214,   125,   214,   214,   214,
   214,   128,   216,   216,   129,   216,   216,   216,   216,   216,
   216,   216,   217,   216,   218,   216,   216,   216,   216,   134,
   217,   217,   218,   217,   217,   217,   217,   217,   217,   217,
   146,   217,   219,   217,   217,   217,   217,   147,   148,   149,
   219,   150,   151,   155,   163,   164,   167,   nil,   nil,   nil,
   220,   nil,   218,   nil,   nil,   nil,   nil,   nil,   220,   nil,
   218,   218,   nil,   218,   218,   218,   218,   218,   218,   218,
   219,   218,   nil,   218,   218,   218,   218,   nil,   219,   219,
   nil,   219,   219,   219,   219,   219,   219,   219,   220,   219,
   221,   219,   219,   219,   219,   nil,   220,   220,   221,   220,
   220,   220,   220,   220,   220,   220,   nil,   220,   nil,   220,
   220,   220,   220,   nil,   nil,   nil,   225,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   225,   nil,   nil,   nil,   221,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   221,   221,   136,   221,
   221,   221,   221,   221,   221,   221,   225,   221,   237,   221,
   221,   221,   221,   225,   225,   136,   237,   136,   136,   nil,
   136,   136,   225,   225,   nil,   225,   225,   225,   225,   225,
   225,   225,   nil,   225,   126,   225,   225,   225,   225,   nil,
   nil,   nil,   126,   nil,   nil,   nil,   237,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   237,   237,   nil,   237,   237,   237,
   237,   237,   237,   237,   nil,   237,   239,   237,   237,   237,
   237,   nil,   126,   nil,   239,   nil,   nil,   nil,   nil,   nil,
   126,   126,   nil,   126,   126,   126,   126,   126,   126,   126,
   nil,   126,   240,   126,   126,   126,   126,   nil,   nil,   nil,
   240,   nil,   nil,   nil,   239,   240,   nil,   nil,   nil,   nil,
   nil,   nil,   239,   239,   nil,   239,   239,   239,   239,   239,
   239,   239,   nil,   239,   242,   239,   239,   239,   239,   nil,
   240,   nil,   242,   nil,   nil,   nil,   nil,   242,   240,   240,
   nil,   240,   240,   240,   240,   240,   240,   240,   nil,   240,
    37,   240,   240,   240,   240,   nil,   nil,   nil,    37,   nil,
   nil,   nil,   242,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   242,   242,   nil,   242,   242,   242,   242,   242,   242,   242,
   nil,   242,    42,   242,   242,   242,   242,   nil,    37,   nil,
    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    37,    37,    37,    37,    37,    37,   nil,    37,   135,    37,
    37,    37,    37,   nil,   nil,   nil,   135,   nil,   nil,   nil,
    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,    42,
   nil,    42,    42,    42,    42,    42,    42,    42,   135,    42,
   262,    42,    42,    42,    42,   135,   135,   nil,   262,   nil,
   nil,   nil,   nil,   nil,   135,   135,   nil,   135,   135,   135,
   135,   135,   135,   135,   nil,   135,   268,   135,   135,   135,
   135,   nil,   nil,   nil,   268,   nil,   nil,   nil,   262,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   262,   262,   nil,   262,
   262,   262,   262,   262,   262,   262,   nil,   262,   nil,   262,
   262,   262,   262,   nil,   268,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   268,   268,   nil,   268,   268,   268,   268,   268,
   268,   268,   169,   268,   nil,   268,   268,   268,   268,   nil,
   169,   nil,   nil,   nil,   nil,   169,   nil,   nil,   nil,   nil,
   106,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   106,   nil,
   nil,   nil,   169,   nil,   106,   nil,   nil,   nil,   107,   169,
   169,   nil,   nil,   nil,   nil,   nil,   107,   nil,   169,   169,
   nil,   169,   169,   169,   169,   169,   169,   169,   106,   169,
   nil,   169,   169,   169,   169,   nil,   106,   106,   nil,   106,
   106,   106,   106,   106,   106,   106,   107,   106,   108,   106,
   106,   106,   106,   nil,   107,   107,   108,   107,   107,   107,
   107,   107,   107,   107,   nil,   107,   nil,   107,   107,   107,
   107,   nil,   nil,   nil,   176,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   176,   nil,   nil,   nil,   108,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   108,   108,   nil,   108,   108,   108,
   108,   108,   108,   108,   nil,   108,   198,   108,   108,   108,
   108,   176,   176,   nil,   198,   nil,   nil,   nil,   nil,   nil,
   176,   176,   nil,   176,   176,   176,   176,   176,   176,   176,
   nil,   176,   202,   176,   176,   176,   176,   nil,   nil,   nil,
   202,   nil,   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   198,   198,   nil,   198,   198,   198,   198,   198,
   198,   198,   202,   198,   109,   198,   198,   198,   198,   202,
   202,   nil,   109,   nil,   nil,   nil,   nil,   nil,   202,   202,
   nil,   202,   202,   202,   202,   202,   202,   202,   nil,   202,
   205,   202,   202,   202,   202,   nil,   nil,   nil,   205,   nil,
   nil,   nil,   109,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   109,   109,   nil,   109,   109,   109,   109,   109,   109,   109,
   205,   109,   110,   109,   109,   109,   109,   205,   205,   nil,
   110,   nil,   nil,   nil,   nil,   nil,   205,   205,   nil,   205,
   205,   205,   205,   205,   205,   205,   nil,   205,   210,   205,
   205,   205,   205,   nil,   nil,   nil,   210,   nil,   nil,   nil,
   110,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   110,   110,
   nil,   110,   110,   110,   110,   110,   110,   110,   210,   110,
   nil,   110,   110,   110,   110,   210,   210,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   210,   210,   nil,   210,   210,   210,
   210,   210,   210,   210,    21,   210,   nil,   210,   210,   210,
   210,    21,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,    21,   nil,    21,    21,   nil,    21,    21,   172,   172,
   nil,   172,   172,   172,   nil,   nil,   nil,   nil,   172,   172,
   172,   172,   172,   172 ]

racc_action_pointer = [
    99,   177,   nil,   162,   nil,   nil,   173,   nil,   166,   163,
   183,   nil,   181,   177,   144,    14,   nil,   nil,   nil,   183,
    -2,  1079,    61,   nil,   nil,   nil,   nil,   168,   nil,   nil,
   186,     3,   138,   nil,    -9,    56,   -15,   576,   nil,   nil,
   nil,   nil,   608,   nil,   nil,   nil,   nil,   139,   nil,   nil,
   182,   nil,   183,   185,   188,   198,   155,   nil,   164,   229,
   184,   nil,   nil,    47,   nil,   nil,   nil,   187,   nil,   nil,
   nil,    94,   247,   nil,     9,   nil,   nil,   nil,   nil,   237,
   184,   243,   214,   234,   235,   nil,   233,   234,   235,   220,
   nil,   nil,   nil,   232,   223,    -4,   225,   nil,    32,    72,
   108,   148,   nil,   nil,   255,    -7,   766,   784,   824,   940,
   998,   265,   nil,    54,   209,   nil,   nil,   267,   269,    -3,
   nil,   nil,   nil,   nil,   263,   281,   460,   nil,   249,   252,
   nil,   nil,   nil,   nil,   277,   634,   423,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   307,   314,   315,   316,
   318,   319,   nil,   nil,   nil,   329,   nil,   nil,   nil,   nil,
   nil,   nil,    90,   321,   330,   nil,     0,   303,     5,   748,
   -26,   nil,  1074,     9,    -5,   nil,   850,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   882,   nil,
   nil,   nil,   908,    21,   nil,   966,     6,    50,    -9,    53,
  1024,   -23,   166,    80,   224,   -24,   242,   260,   300,   318,
   336,   376,    93,   nil,   nil,   402,   nil,   nil,    68,    73,
   133,   112,   nil,   nil,   nil,   nil,    82,   434,   107,   492,
   518,    85,   550,   nil,   nil,   nil,    84,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   121,   134,   nil,   100,   121,
   nil,   nil,   666,   155,   nil,   nil,   133,   nil,   692,   nil,
   nil,   nil,   nil ]

racc_action_default = [
  -167,  -167,    -1,  -167,    -3,    -4,   -10,   -22,  -167,   -33,
  -167,    -2,    -6,  -167,  -167,  -167,   -34,   273,    -5,  -167,
  -167,  -167,   -44,   -45,   -47,   -48,   -87,   -30,   -31,   -32,
   -36,   -39,  -157,  -114,  -115,  -118,  -121,  -167,  -123,  -124,
  -125,  -126,  -167,  -128,  -129,  -130,  -132,  -167,  -135,  -136,
  -167,  -138,  -167,  -167,  -167,  -167,  -144,  -145,  -149,  -167,
  -167,  -155,  -156,  -167,  -160,  -161,  -162,  -167,  -164,  -165,
  -166,    -7,   -11,   -13,   -18,   -15,   -16,   -17,   -23,  -167,
  -167,  -167,  -167,  -167,  -167,   -52,   -54,   -56,   -57,  -167,
   -43,  -157,   -29,   -64,  -167,  -167,  -167,   -38,  -167,  -167,
  -167,  -167,  -122,  -131,  -167,  -167,  -167,  -167,  -167,  -167,
  -167,  -147,  -148,  -167,  -167,  -159,  -163,  -167,  -167,  -167,
   -14,   -19,   -20,   -24,  -167,   -27,  -167,   -49,  -167,  -167,
   -53,   -55,   -58,   -42,   -66,  -167,   -41,   -35,   -37,  -116,
  -117,  -119,  -120,  -127,  -133,  -134,  -167,  -167,  -167,  -167,
  -167,  -167,  -146,  -150,  -152,  -167,  -154,  -158,    -8,    -9,
   -12,   -25,  -167,  -167,   -81,   -50,  -167,   -71,  -167,  -167,
   -65,   -73,  -167,  -167,   -90,   -92,  -167,   -95,   -96,   -97,
   -99,  -100,  -101,  -102,  -103,  -104,  -111,  -112,  -113,  -137,
  -139,  -140,  -141,  -142,  -143,  -153,   -26,   -28,  -167,   -51,
   -59,   -60,  -167,  -167,   -40,  -167,  -167,  -167,  -167,  -113,
  -167,  -167,  -167,  -167,  -167,  -167,  -167,  -167,  -167,  -167,
  -167,  -167,  -167,   -46,   -86,  -167,   -94,   -80,   -61,  -167,
   -72,   -67,   -69,   -70,   -21,   -98,   -91,  -167,  -167,  -167,
  -167,  -167,  -167,   -77,   -78,   -83,  -167,   -85,  -105,  -106,
  -107,  -108,  -109,  -110,   -93,  -167,   -63,   -89,  -167,  -167,
   -76,   -82,  -167,  -167,   -84,   -62,  -167,   -68,  -167,   -75,
   -79,   -88,   -74 ]

racc_goto_table = [
    90,    75,    22,   124,   163,    78,    29,    21,    73,    97,
    31,   170,   223,   243,   232,   241,   256,   245,   231,   248,
   249,   250,   251,   252,   253,     6,     4,   236,     6,    11,
   103,   141,   142,   139,   140,   254,   226,   104,   260,   155,
   259,   102,   261,   153,   154,   208,   200,     2,     5,    12,
    18,    72,   223,   120,    79,    15,    27,    92,    93,   134,
   167,   204,   224,   123,   199,   269,   267,   133,     1,   201,
   127,   272,   255,   nil,   138,   125,   227,   223,   228,   nil,
   nil,   230,    22,   144,   nil,   196,   137,   136,   nil,   nil,
    31,   103,   103,   103,   103,   nil,   nil,   nil,   nil,   nil,
    75,   147,   148,   149,   150,   151,   nil,   160,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   165,    22,   nil,   nil,
   263,   164,   166,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   125,   nil,   nil,
   nil,   nil,   nil,   nil,   209,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   233,   nil,   nil,
   nil,   nil,   nil,   164,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   257,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   104,   nil,   164,   nil,   233,
   nil,   nil,   nil,   nil,   271 ]

racc_goto_check = [
    26,    12,    31,    18,    20,    16,    24,    15,     9,    26,
    19,    40,    13,    49,    44,    47,    42,    47,    43,    47,
    47,    47,    47,    47,    47,     5,     3,    53,     5,     3,
    61,    62,    62,    60,    60,    54,    55,    19,    49,    64,
    47,    65,    47,    76,    77,    40,    38,     2,     4,     6,
     7,     8,    13,    11,    17,    21,    22,    23,    27,    28,
    29,    30,    33,    16,    37,    47,    44,    26,     1,    39,
    31,    47,    41,   nil,    26,    19,    20,    13,    40,   nil,
   nil,    40,    31,    26,   nil,    18,    24,    15,   nil,   nil,
    19,    61,    61,    61,    61,   nil,   nil,   nil,   nil,   nil,
    12,    19,    19,    19,    19,    19,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,    31,   nil,   nil,
    20,    19,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    19,   nil,    19,   nil,    12,
   nil,   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    68,    47,    26,    48,    25,    43,    38,    31,   -12,
   nil,   -21,   -19,  -161,   nil,    -7,   -16,    33,   -77,    -5,
  -122,    46,    41,    30,    -9,   nil,   -22,    31,   -34,   -74,
  -106,   -12,   nil,  -111,   nil,   nil,   nil,  -102,  -120,   -97,
  -124,  -157,  -213,  -188,  -192,   nil,   nil,  -197,   nil,  -200,
   nil,   nil,   nil,  -183,  -190,  -140,   nil,   nil,   nil,   nil,
   -65,    -7,   -69,   nil,   -74,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -70,   -69,   nil,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,   nil,
    74,   nil,    40,   171,     7,   nil,   nil,   nil,   nil,   188,
   nil,   nil,   nil,   nil,   nil,    30,    48,   nil,   nil,   nil,
   nil,    49,    23,   244,    24,    25,    84,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   187,   181,   172,   182,   nil,
   183,   184,   185,   174,   175,   177,   178,   179,   180,   186,
    33,    34,    35,    36,    37,    38,    39,    41,    43,    44,
    45,    47,    51,    56,    57,    60,   nil,   nil,    64,    65,
    66 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 68, :_reduce_none,
  2, 69, :_reduce_2,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  3, 70, :_reduce_5,
  0, 74, :_reduce_none,
  2, 74, :_reduce_7,
  4, 74, :_reduce_8,
  4, 74, :_reduce_9,
  0, 73, :_reduce_none,
  3, 73, :_reduce_11,
  3, 75, :_reduce_12,
  1, 75, :_reduce_none,
  2, 76, :_reduce_14,
  1, 77, :_reduce_none,
  1, 77, :_reduce_16,
  1, 77, :_reduce_17,
  0, 78, :_reduce_18,
  1, 78, :_reduce_19,
  1, 78, :_reduce_20,
  3, 80, :_reduce_21,
  1, 72, :_reduce_none,
  4, 71, :_reduce_23,
  5, 71, :_reduce_24,
  3, 84, :_reduce_25,
  3, 85, :_reduce_26,
  1, 85, :_reduce_none,
  4, 83, :_reduce_28,
  4, 81, :_reduce_29,
  3, 81, :_reduce_30,
  1, 89, :_reduce_31,
  1, 89, :_reduce_32,
  0, 88, :_reduce_none,
  1, 88, :_reduce_34,
  3, 91, :_reduce_35,
  1, 91, :_reduce_none,
  3, 92, :_reduce_37,
  2, 92, :_reduce_38,
  1, 92, :_reduce_none,
  4, 90, :_reduce_40,
  2, 94, :_reduce_41,
  3, 82, :_reduce_42,
  2, 82, :_reduce_43,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 100, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  3, 101, :_reduce_49,
  4, 101, :_reduce_50,
  5, 102, :_reduce_51,
  1, 103, :_reduce_52,
  2, 103, :_reduce_53,
  1, 103, :_reduce_54,
  2, 103, :_reduce_55,
  1, 103, :_reduce_56,
  1, 103, :_reduce_57,
  2, 103, :_reduce_58,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  2, 105, :_reduce_61,
  4, 106, :_reduce_62,
  1, 108, :_reduce_none,
  0, 95, :_reduce_none,
  2, 95, :_reduce_65,
  0, 96, :_reduce_none,
  3, 96, :_reduce_67,
  3, 110, :_reduce_68,
  1, 110, :_reduce_none,
  1, 111, :_reduce_none,
  0, 97, :_reduce_none,
  2, 97, :_reduce_72,
  1, 112, :_reduce_none,
  6, 113, :_reduce_74,
  5, 113, :_reduce_75,
  4, 115, :_reduce_76,
  3, 115, :_reduce_77,
  1, 116, :_reduce_none,
  3, 116, :_reduce_79,
  3, 87, :_reduce_80,
  1, 87, :_reduce_none,
  4, 117, :_reduce_82,
  3, 117, :_reduce_83,
  4, 118, :_reduce_84,
  3, 118, :_reduce_85,
  2, 119, :_reduce_86,
  1, 98, :_reduce_87,
  3, 109, :_reduce_88,
  1, 109, :_reduce_none,
  1, 107, :_reduce_none,
  3, 107, :_reduce_91,
  1, 120, :_reduce_none,
  3, 120, :_reduce_93,
  2, 121, :_reduce_94,
  1, 121, :_reduce_none,
  1, 122, :_reduce_none,
  1, 123, :_reduce_none,
  3, 123, :_reduce_98,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 125, :_reduce_105,
  3, 125, :_reduce_106,
  3, 125, :_reduce_107,
  3, 125, :_reduce_108,
  3, 125, :_reduce_109,
  3, 125, :_reduce_110,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 126, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  3, 127, :_reduce_116,
  3, 127, :_reduce_117,
  1, 127, :_reduce_none,
  3, 129, :_reduce_119,
  3, 129, :_reduce_120,
  1, 129, :_reduce_none,
  2, 130, :_reduce_122,
  1, 130, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  3, 132, :_reduce_127,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 136, :_reduce_132,
  3, 79, :_reduce_133,
  3, 79, :_reduce_134,
  1, 79, :_reduce_none,
  1, 138, :_reduce_none,
  4, 134, :_reduce_137,
  1, 134, :_reduce_none,
  4, 139, :_reduce_139,
  4, 139, :_reduce_140,
  4, 139, :_reduce_141,
  4, 139, :_reduce_142,
  4, 139, :_reduce_143,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 140, :_reduce_146,
  2, 140, :_reduce_147,
  2, 140, :_reduce_148,
  1, 140, :_reduce_149,
  3, 141, :_reduce_150,
  1, 142, :_reduce_none,
  1, 143, :_reduce_none,
  2, 144, :_reduce_153,
  1, 144, :_reduce_154,
  1, 131, :_reduce_155,
  1, 131, :_reduce_156,
  1, 93, :_reduce_157,
  3, 128, :_reduce_158,
  2, 128, :_reduce_159,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 145, :_reduce_none,
  2, 147, :_reduce_163,
  1, 147, :_reduce_164,
  1, 146, :_reduce_165,
  1, 146, :_reduce_166 ]

racc_reduce_n = 167

racc_shift_n = 273

racc_token_table = {
  false => 0,
  :error => 1,
  :EXPLAIN => 2,
  :LIMIT => 3,
  :unsigned_integer => 4,
  :comma => 5,
  :OFFSET => 6,
  :ORDER => 7,
  :BY => 8,
  :built_in_function => 9,
  :ASC => 10,
  :DESC => 11,
  :left_paren => 12,
  :right_paren => 13,
  :INSERT => 14,
  :INTO => 15,
  :VALUES => 16,
  :SELECT => 17,
  :asterisk => 18,
  :DISTINCT => 19,
  :AS => 20,
  :FROM => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :WHERE => 31,
  :GROUP => 32,
  :HAVING => 33,
  :NOT => 34,
  :BETWEEN => 35,
  :AND => 36,
  :IN => 37,
  :LIKE => 38,
  :IS => 39,
  :NULL => 40,
  :EXISTS => 41,
  :identifier => 42,
  :OR => 43,
  :equals_operator => 44,
  :not_equals_operator => 45,
  :less_than_operator => 46,
  :greater_than_operator => 47,
  :less_than_or_equals_operator => 48,
  :greater_than_or_equals_operator => 49,
  :plus_sign => 50,
  :minus_sign => 51,
  :solidus => 52,
  :CURRENT_USER => 53,
  :period => 54,
  :COUNT => 55,
  :AVG => 56,
  :MAX => 57,
  :MIN => 58,
  :SUM => 59,
  :E => 60,
  :quote => 61,
  :character_string_literal => 62,
  :DATE => 63,
  :date_string => 64,
  :TRUE => 65,
  :FALSE => 66 }

racc_nt_base = 67

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EXPLAIN",
  "LIMIT",
  "unsigned_integer",
  "comma",
  "OFFSET",
  "ORDER",
  "BY",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "TRUE",
  "FALSE",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "limit_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_modifier",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "bool_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 9)
  def _reduce_2(val, _values, result)
     result = SQLParser::Statement::Explain.new(val[1]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.racc', 14)
  def _reduce_5(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_7(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_12(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_14(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_26(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Distinct.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_35(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_51(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 59 omitted

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_68(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_80(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_88(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_98(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 121 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_122(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_127(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_153(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Date.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::Bool.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::Bool.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
