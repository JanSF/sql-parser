#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 342)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    56,    72,    72,    95,   229,    77,    71,    71,    40,  -130,
    91,    84,   199,   240,     7,   150,   200,     8,    56,   241,
    93,    94,    78,   204,    80,    81,    40,    82,    83,   196,
   197,   216,    86,    86,   204,   219,    56,    96,    30,    30,
    30,  -130,  -130,  -130,    40,   223,    59,    60,    30,    44,
    57,    48,    50,    51,    52,    53,    30,    61,   228,    64,
    65,    59,    60,   138,    59,    60,   236,    44,    57,    48,
    50,    51,    52,    53,    30,    61,    56,    64,    65,   110,
   109,    77,    59,    60,    40,    44,    57,    48,    50,    51,
    52,    53,     8,    61,    56,    64,    65,   204,    78,    86,
    80,    81,    40,    82,    83,   231,   252,   232,   233,   116,
   117,   219,    56,   236,    30,   112,   113,   256,   258,   259,
   234,   260,    59,    60,    30,    44,    57,    48,    50,    51,
    52,    53,    30,    61,   262,    64,    65,   264,    86,   204,
    59,    60,     9,    44,    57,    48,    50,    51,    52,    53,
    30,    61,    56,    64,    65,    11,    12,    14,    59,    60,
   234,    44,    57,    48,    50,    51,    52,    53,    15,    61,
    56,    64,    65,    17,    18,    24,    66,    89,   234,    90,
   -86,   100,   101,   102,   103,   104,   105,  -149,    56,   106,
    30,   107,   108,   111,   114,    76,   234,   121,    59,    60,
    24,    44,    57,    48,    50,    51,    52,    53,    30,    61,
   123,    64,    65,   124,   125,   126,    59,    60,   127,    44,
    57,    48,    50,    51,    52,    53,    30,    61,    56,    64,
    65,    86,   130,    24,    59,    60,   234,    44,    57,    48,
    50,    51,    52,    53,    86,    61,    56,    64,    65,   138,
    77,    86,   146,   151,   234,   152,   153,    75,   155,   156,
    24,    76,    24,   162,   183,   184,    30,    78,   185,    80,
    81,   186,    82,    83,    59,    60,   187,    44,    57,    48,
    50,    51,    52,    53,    30,    61,    56,    64,    65,   188,
   189,   191,    59,    60,   163,    44,    57,    48,    50,    51,
    52,    53,   192,    61,    56,    64,    65,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   170,   nil,   nil,   nil,
   nil,   nil,    56,   167,    30,   nil,   nil,   nil,   nil,   nil,
   234,   nil,    59,    60,   nil,    44,    57,    48,    50,    51,
    52,    53,    30,    61,   nil,    64,    65,   nil,   nil,   nil,
    59,    60,   nil,    44,    57,    48,    50,    51,    52,    53,
    30,    61,    56,    64,    65,   nil,   nil,   nil,    59,    60,
    40,    44,    57,    48,    50,    51,    52,    53,   nil,    61,
    56,    64,    65,   nil,   nil,   nil,   nil,   nil,   234,   nil,
   nil,   205,   206,   nil,   207,   208,   209,   nil,   nil,   nil,
    30,   210,   211,   212,   213,   214,   215,   nil,   nil,   nil,
   nil,    44,    57,    48,    50,    51,    52,    53,    30,    61,
   nil,    64,    65,   nil,   nil,   nil,    59,    60,    56,    44,
    57,    48,    50,    51,    52,    53,    40,    61,   nil,    64,
    65,     8,   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    59,    60,   nil,    44,    57,    48,
    50,    51,    52,    53,    30,    61,   nil,    64,    65,   nil,
   nil,   nil,    59,    60,    56,    44,    57,    48,    50,    51,
    52,    53,    40,    61,   nil,    64,    65,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   163,   nil,
   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    59,    60,   nil,    44,    57,    48,    50,    51,    52,    53,
   170,    61,    56,    64,    65,   nil,   nil,   167,    30,   nil,
   234,   nil,   nil,   nil,   nil,   nil,    59,    60,   nil,    44,
    57,    48,    50,    51,    52,    53,    56,    61,   nil,    64,
    65,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    59,    60,
   nil,    44,    57,    48,    50,    51,    52,    53,   nil,    61,
    56,    64,    65,   nil,    30,   nil,   nil,   nil,    40,   nil,
   nil,   nil,    59,    60,    26,    44,    57,    48,    50,    51,
    52,    53,   nil,    61,    56,    64,    65,   nil,   nil,   nil,
   nil,   nil,   234,   nil,   nil,   nil,   nil,   nil,    30,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    59,    60,   nil,    44,
    57,    48,    50,    51,    52,    53,   nil,    61,    56,    64,
    65,   nil,    30,   nil,   nil,   nil,    40,   nil,   nil,   nil,
    59,    60,   140,    44,    57,    48,    50,    51,    52,    53,
   nil,    61,   nil,    64,    65,   nil,    56,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   163,   nil,    30,   nil,   nil,     8,
   nil,   nil,   nil,   nil,    59,    60,    56,    44,    57,    48,
    50,    51,    52,    53,    40,    61,   170,    64,    65,   nil,
   nil,   nil,   nil,   167,    30,   nil,    56,   nil,   nil,   nil,
   nil,   nil,    59,    60,    40,    44,    57,    48,    50,    51,
    52,    53,   nil,    61,    30,    64,    65,   nil,   nil,   nil,
   nil,   nil,    59,    60,    56,    44,    57,    48,    50,    51,
    52,    53,    40,    61,    30,    64,    65,   nil,   nil,   nil,
   nil,   nil,    59,    60,   nil,    44,    57,    48,    50,    51,
    52,    53,    56,    61,   nil,    64,    65,   nil,   nil,   nil,
   163,   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    59,    60,    56,    44,    57,    48,    50,    51,    52,    53,
    40,    61,   nil,    64,    65,   nil,   nil,   nil,   nil,   167,
    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    59,    60,
    56,    44,    57,    48,    50,    51,    52,    53,   163,    61,
    30,    64,    65,   nil,   nil,   nil,   nil,   nil,    59,    60,
    56,    44,    57,    48,    50,    51,    52,    53,    40,    61,
   170,    64,    65,   nil,   nil,   nil,   nil,   167,    30,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    59,    60,    56,    44,
    57,    48,    50,    51,    52,    53,   163,    61,    30,    64,
    65,   nil,   nil,   nil,   nil,   nil,    59,    60,    56,    44,
    57,    48,    50,    51,    52,    53,    40,    61,   170,    64,
    65,   nil,   nil,   nil,   nil,   167,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    59,    60,    56,    44,    57,    48,
    50,    51,    52,    53,   163,    61,    30,    64,    65,   nil,
   nil,   nil,   nil,   nil,    59,    60,    56,    44,    57,    48,
    50,    51,    52,    53,   234,    61,   170,    64,    65,   nil,
   nil,   nil,   nil,   167,    30,   nil,    56,   nil,   nil,   nil,
   nil,   nil,    59,    60,   234,    44,    57,    48,    50,    51,
    52,    53,   nil,    61,    30,    64,    65,   nil,   nil,   nil,
   nil,   nil,    59,    60,   nil,    44,    57,    48,    50,    51,
    52,    53,   nil,    61,    30,    64,    65,   nil,   nil,   nil,
   nil,   nil,    59,    60,   nil,    44,    57,    48,    50,    51,
    52,    53,   nil,    61,   nil,    64,    65 ]

racc_action_check = [
    93,   114,    18,    34,   202,   160,   114,    18,    93,    32,
    29,    20,   161,   209,     0,   108,   162,     0,    94,   209,
    33,    33,   160,   164,   160,   160,    94,   160,   160,   160,
   160,   167,    29,    20,   202,   168,    95,    34,    93,   114,
    18,    32,    32,    32,    95,   197,    93,    93,   200,    93,
    93,    93,    93,    93,    93,    93,    94,    93,   201,    93,
    93,   108,   108,   203,    94,    94,   207,    94,    94,    94,
    94,    94,    94,    94,    95,    94,   156,    94,    94,    61,
    61,   131,    95,    95,   156,    95,    95,    95,    95,    95,
    95,    95,   216,    95,    96,    95,    95,   222,   131,   223,
   131,   131,    96,   131,   131,   205,   225,   205,   205,    69,
    69,   230,   210,   232,   156,    66,    66,   235,   240,   249,
   210,   250,   156,   156,   252,   156,   156,   156,   156,   156,
   156,   156,    96,   156,   253,   156,   156,   257,   260,   224,
    96,    96,     1,    96,    96,    96,    96,    96,    96,    96,
   210,    96,   211,    96,    96,     5,     7,     8,   210,   210,
   211,   210,   210,   210,   210,   210,   210,   210,     9,   210,
   212,   210,   210,    10,    11,    12,    17,    25,   212,    28,
    30,    45,    48,    50,    51,    52,    53,    54,   213,    56,
   211,    57,    58,    64,    67,    74,   213,    76,   211,   211,
    77,   211,   211,   211,   211,   211,   211,   211,   212,   211,
    78,   211,   211,    79,    81,    82,   212,   212,    83,   212,
   212,   212,   212,   212,   212,   212,   213,   212,   214,   212,
   212,    84,    88,    89,   213,   213,   214,   213,   213,   213,
   213,   213,   213,   213,    91,   213,   215,   213,   213,    99,
    19,   100,   106,   109,   215,   112,   113,    19,   119,   120,
   123,    19,   124,   129,   140,   141,   214,    19,   142,    19,
    19,   143,    19,    19,   214,   214,   144,   214,   214,   214,
   214,   214,   214,   214,   215,   214,   219,   214,   214,   145,
   149,   157,   215,   215,   219,   215,   215,   215,   215,   215,
   215,   215,   158,   215,   121,   215,   215,   nil,   nil,   nil,
   nil,   nil,   121,   nil,   nil,   nil,   219,   nil,   nil,   nil,
   nil,   nil,   231,   219,   219,   nil,   nil,   nil,   nil,   nil,
   231,   nil,   219,   219,   nil,   219,   219,   219,   219,   219,
   219,   219,   121,   219,   nil,   219,   219,   nil,   nil,   nil,
   121,   121,   nil,   121,   121,   121,   121,   121,   121,   121,
   231,   121,    35,   121,   121,   nil,   nil,   nil,   231,   231,
    35,   231,   231,   231,   231,   231,   231,   231,   nil,   231,
   233,   231,   231,   nil,   nil,   nil,   nil,   nil,   233,   nil,
   nil,   166,   166,   nil,   166,   166,   166,   nil,   nil,   nil,
    35,   166,   166,   166,   166,   166,   166,   nil,   nil,   nil,
   nil,    35,    35,    35,    35,    35,    35,    35,   233,    35,
   nil,    35,    35,   nil,   nil,   nil,   233,   233,   234,   233,
   233,   233,   233,   233,   233,   233,   234,   233,   nil,   233,
   233,   234,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   234,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   234,   234,   nil,   234,   234,   234,
   234,   234,   234,   234,    40,   234,   nil,   234,   234,   nil,
   nil,   nil,    40,    40,   236,    40,    40,    40,    40,    40,
    40,    40,   236,    40,   nil,    40,    40,   236,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   130,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   130,   nil,
   nil,   nil,   236,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   236,   236,   nil,   236,   236,   236,   236,   236,   236,   236,
   130,   236,   256,   236,   236,   nil,   nil,   130,   130,   nil,
   256,   nil,   nil,   nil,   nil,   nil,   130,   130,   nil,   130,
   130,   130,   130,   130,   130,   130,    90,   130,   nil,   130,
   130,   nil,   nil,   nil,    90,   nil,   nil,   nil,   nil,   nil,
   256,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   256,   256,
   nil,   256,   256,   256,   256,   256,   256,   256,   nil,   256,
    13,   256,   256,   nil,    90,   nil,   nil,   nil,    13,   nil,
   nil,   nil,    90,    90,    13,    90,    90,    90,    90,    90,
    90,    90,   nil,    90,   262,    90,    90,   nil,   nil,   nil,
   nil,   nil,   262,   nil,   nil,   nil,   nil,   nil,    13,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    13,    13,   nil,    13,
    13,    13,    13,    13,    13,    13,   nil,    13,   101,    13,
    13,   nil,   262,   nil,   nil,   nil,   101,   nil,   nil,   nil,
   262,   262,   101,   262,   262,   262,   262,   262,   262,   262,
   nil,   262,   nil,   262,   262,   nil,   163,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   163,   nil,   101,   nil,   nil,   163,
   nil,   nil,   nil,   nil,   101,   101,   102,   101,   101,   101,
   101,   101,   101,   101,   102,   101,   163,   101,   101,   nil,
   nil,   nil,   nil,   163,   163,   nil,   103,   nil,   nil,   nil,
   nil,   nil,   163,   163,   103,   163,   163,   163,   163,   163,
   163,   163,   nil,   163,   102,   163,   163,   nil,   nil,   nil,
   nil,   nil,   102,   102,   104,   102,   102,   102,   102,   102,
   102,   102,   104,   102,   103,   102,   102,   nil,   nil,   nil,
   nil,   nil,   103,   103,   nil,   103,   103,   103,   103,   103,
   103,   103,   170,   103,   nil,   103,   103,   nil,   nil,   nil,
   170,   nil,   104,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   104,   104,   192,   104,   104,   104,   104,   104,   104,   104,
   192,   104,   nil,   104,   104,   nil,   nil,   nil,   nil,   170,
   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   170,   170,
   196,   170,   170,   170,   170,   170,   170,   170,   196,   170,
   192,   170,   170,   nil,   nil,   nil,   nil,   nil,   192,   192,
   105,   192,   192,   192,   192,   192,   192,   192,   105,   192,
   196,   192,   192,   nil,   nil,   nil,   nil,   196,   196,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   196,   196,   199,   196,
   196,   196,   196,   196,   196,   196,   199,   196,   105,   196,
   196,   nil,   nil,   nil,   nil,   nil,   105,   105,    75,   105,
   105,   105,   105,   105,   105,   105,    75,   105,   199,   105,
   105,   nil,   nil,   nil,   nil,   199,   199,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   199,   199,   204,   199,   199,   199,
   199,   199,   199,   199,   204,   199,    75,   199,   199,   nil,
   nil,   nil,   nil,   nil,    75,    75,   206,    75,    75,    75,
    75,    75,    75,    75,   206,    75,   204,    75,    75,   nil,
   nil,   nil,   nil,   204,   204,   nil,   208,   nil,   nil,   nil,
   nil,   nil,   204,   204,   208,   204,   204,   204,   204,   204,
   204,   204,   nil,   204,   206,   204,   204,   nil,   nil,   nil,
   nil,   nil,   206,   206,   nil,   206,   206,   206,   206,   206,
   206,   206,   nil,   206,   208,   206,   206,   nil,   nil,   nil,
   nil,   nil,   208,   208,   nil,   208,   208,   208,   208,   208,
   208,   208,   nil,   208,   nil,   208,   208 ]

racc_action_pointer = [
     1,   142,   nil,   nil,   nil,   149,   nil,   142,   139,   168,
   171,   167,   134,   607,   nil,   nil,   nil,   173,    -1,   246,
    -8,   nil,   nil,   nil,   nil,   157,   nil,   nil,   175,    -9,
   127,   nil,    -8,   -29,   -14,   359,   nil,   nil,   nil,   nil,
   443,   nil,   nil,   nil,   nil,   128,   nil,   nil,   171,   nil,
   172,   173,   174,   175,   128,   nil,   136,   188,   133,   nil,
   nil,    19,   nil,   nil,   130,   nil,   111,   190,   nil,   100,
   nil,   nil,   nil,   nil,   180,   905,   186,   159,   188,   191,
   nil,   189,   190,   193,   190,   nil,   nil,   nil,   202,   192,
   573,   203,   nil,    -3,    15,    33,    91,   nil,   nil,   237,
   210,   665,   713,   733,   761,   857,   249,   nil,    12,   193,
   nil,   nil,   252,   253,    -2,   nil,   nil,   nil,   nil,   246,
   255,   301,   nil,   219,   221,   nil,   nil,   nil,   nil,   232,
   517,    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   252,   253,   256,   259,   264,   277,   nil,   nil,   nil,   287,
   nil,   nil,   nil,   nil,   nil,   nil,    73,   279,   298,   nil,
     1,   -20,     9,   693,   -19,   nil,   358,    20,     0,   nil,
   789,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   809,   nil,   nil,   nil,   837,    34,   nil,   885,
     7,    46,    -8,    51,   933,    71,   953,    55,   973,   -20,
   109,   149,   167,   185,   225,   243,    76,   nil,   nil,   283,
   nil,   nil,    55,    58,    97,   102,   nil,   nil,   nil,   nil,
    76,   319,   102,   377,   425,    82,   491,   nil,   nil,   nil,
    79,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   107,
   117,   nil,    83,    99,   nil,   nil,   549,   125,   nil,   nil,
    97,   nil,   631,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -162,  -162,    -1,    -2,    -3,    -9,   -21,  -162,   -32,  -162,
    -5,  -162,  -162,  -162,   -33,   267,    -4,  -162,  -162,  -162,
   -43,   -44,   -46,   -47,   -86,   -29,   -30,   -31,   -35,   -38,
  -155,  -113,  -114,  -117,  -120,  -162,  -122,  -123,  -124,  -125,
  -162,  -127,  -128,  -129,  -131,  -162,  -133,  -134,  -162,  -136,
  -162,  -162,  -162,  -162,  -142,  -143,  -147,  -162,  -162,  -153,
  -154,  -162,  -158,  -159,  -162,  -161,    -6,   -10,   -12,   -17,
   -14,   -15,   -16,   -22,  -162,  -162,  -162,  -162,  -162,  -162,
   -51,   -53,   -55,   -56,  -162,   -42,  -155,   -28,   -63,  -162,
  -162,  -162,   -37,  -162,  -162,  -162,  -162,  -121,  -130,  -162,
  -162,  -162,  -162,  -162,  -162,  -162,  -145,  -146,  -162,  -162,
  -157,  -160,  -162,  -162,  -162,   -13,   -18,   -19,   -23,  -162,
   -26,  -162,   -48,  -162,  -162,   -52,   -54,   -57,   -41,   -65,
  -162,   -40,   -34,   -36,  -115,  -116,  -118,  -119,  -126,  -132,
  -162,  -162,  -162,  -162,  -162,  -162,  -144,  -148,  -150,  -162,
  -152,  -156,    -7,    -8,   -11,   -24,  -162,  -162,   -80,   -49,
  -162,   -70,  -162,  -162,   -64,   -72,  -162,  -162,   -89,   -91,
  -162,   -94,   -95,   -96,   -98,   -99,  -100,  -101,  -102,  -103,
  -110,  -111,  -112,  -135,  -137,  -138,  -139,  -140,  -141,  -151,
   -25,   -27,  -162,   -50,   -58,   -59,  -162,  -162,   -39,  -162,
  -162,  -162,  -162,  -112,  -162,  -162,  -162,  -162,  -162,  -162,
  -162,  -162,  -162,  -162,  -162,  -162,  -162,   -45,   -85,  -162,
   -93,   -79,   -60,  -162,   -71,   -66,   -68,   -69,   -20,   -97,
   -90,  -162,  -162,  -162,  -162,  -162,  -162,   -76,   -77,   -82,
  -162,   -84,  -104,  -105,  -106,  -107,  -108,  -109,   -92,  -162,
   -62,   -88,  -162,  -162,   -75,   -81,  -162,  -162,   -83,   -61,
  -162,   -67,  -162,   -74,   -78,   -87,   -73 ]

racc_goto_table = [
    85,    70,   157,   217,    20,   119,    27,    19,    68,    92,
    29,    73,   193,   164,   237,   226,    98,   136,   137,   134,
   135,     1,   195,   249,   250,   225,   230,   248,   220,   149,
    97,   147,   148,   194,     2,     3,     4,    99,     5,   254,
    10,    16,    67,   217,   115,    74,   202,    13,    25,    87,
    88,   129,   161,   198,   218,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   128,   nil,   118,   261,   217,   122,
   nil,   133,   120,   221,    98,    98,    98,    98,   nil,   222,
   139,    20,   224,   132,   131,   nil,   190,    29,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,   141,   142,
   143,   144,   145,   nil,   154,   235,   nil,   239,   nil,   242,
   243,   244,   245,   246,   247,   159,    20,   257,   158,   160,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   253,   nil,   255,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   120,   nil,   263,   nil,   nil,   nil,   nil,
   203,   266,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   227,   nil,   nil,   nil,   nil,   nil,   158,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   251,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    99,   nil,   158,   nil,   227,   nil,   nil,   nil,   nil,
   265 ]

racc_goto_check = [
    26,    12,    20,    13,    31,    18,    24,    15,     9,    26,
    19,    16,    37,    40,    49,    44,    61,    62,    62,    60,
    60,     1,    39,    41,    42,    43,    53,    54,    55,    64,
    65,    76,    77,    38,     2,     3,     4,    19,     5,    49,
     6,     7,     8,    13,    11,    17,    40,    21,    22,    23,
    27,    28,    29,    30,    33,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,    16,    44,    13,    31,
   nil,    26,    19,    20,    61,    61,    61,    61,   nil,    40,
    26,    31,    40,    24,    15,   nil,    18,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,    19,    19,
    19,    19,    19,   nil,     9,    47,   nil,    47,   nil,    47,
    47,    47,    47,    47,    47,    31,    31,    20,    19,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,    47,   nil,   nil,   nil,   nil,
    19,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,    19,   nil,    12,   nil,   nil,   nil,   nil,
    26 ]

racc_goto_pointer = [
   nil,    21,    34,    35,    36,    38,    35,    31,    24,   -10,
   nil,   -25,   -17,  -164,   nil,    -5,    -8,    26,   -70,    -3,
  -119,    39,    35,    24,    -7,   nil,   -20,    25,   -37,   -77,
  -108,    -8,   nil,  -113,   nil,   nil,   nil,  -148,  -127,  -138,
  -117,  -200,  -199,  -175,  -185,   nil,   nil,  -101,   nil,  -193,
   nil,   nil,   nil,  -178,  -192,  -142,   nil,   nil,   nil,   nil,
   -74,   -19,   -78,   nil,   -79,    -5,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -77,   -76,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   201,   nil,   nil,   nil,   nil,
    69,   nil,    38,   165,     6,   nil,   nil,   nil,   nil,   182,
   nil,   nil,   nil,   nil,   nil,    28,    46,   nil,   nil,   nil,
   nil,    47,    21,   238,    22,    23,    79,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   181,   175,   166,   176,   nil,
   177,   178,   179,   168,   169,   171,   172,   173,   174,   180,
    31,    32,    33,    34,    35,    36,    37,    39,    41,    42,
    43,    45,    49,    54,    55,    58,   nil,   nil,    62,    63 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 65, :_reduce_none,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  3, 67, :_reduce_4,
  0, 71, :_reduce_none,
  2, 71, :_reduce_6,
  4, 71, :_reduce_7,
  4, 71, :_reduce_8,
  0, 70, :_reduce_none,
  3, 70, :_reduce_10,
  3, 72, :_reduce_11,
  1, 72, :_reduce_none,
  2, 73, :_reduce_13,
  1, 74, :_reduce_none,
  1, 74, :_reduce_15,
  1, 74, :_reduce_16,
  0, 75, :_reduce_17,
  1, 75, :_reduce_18,
  1, 75, :_reduce_19,
  3, 77, :_reduce_20,
  1, 69, :_reduce_none,
  4, 68, :_reduce_22,
  5, 68, :_reduce_23,
  3, 81, :_reduce_24,
  3, 82, :_reduce_25,
  1, 82, :_reduce_none,
  4, 80, :_reduce_27,
  4, 78, :_reduce_28,
  3, 78, :_reduce_29,
  1, 86, :_reduce_30,
  1, 86, :_reduce_31,
  0, 85, :_reduce_none,
  1, 85, :_reduce_33,
  3, 88, :_reduce_34,
  1, 88, :_reduce_none,
  3, 89, :_reduce_36,
  2, 89, :_reduce_37,
  1, 89, :_reduce_none,
  4, 87, :_reduce_39,
  2, 91, :_reduce_40,
  3, 79, :_reduce_41,
  2, 79, :_reduce_42,
  1, 79, :_reduce_none,
  1, 79, :_reduce_none,
  1, 97, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  3, 98, :_reduce_48,
  4, 98, :_reduce_49,
  5, 99, :_reduce_50,
  1, 100, :_reduce_51,
  2, 100, :_reduce_52,
  1, 100, :_reduce_53,
  2, 100, :_reduce_54,
  1, 100, :_reduce_55,
  1, 100, :_reduce_56,
  2, 100, :_reduce_57,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  2, 102, :_reduce_60,
  4, 103, :_reduce_61,
  1, 105, :_reduce_none,
  0, 92, :_reduce_none,
  2, 92, :_reduce_64,
  0, 93, :_reduce_none,
  3, 93, :_reduce_66,
  3, 107, :_reduce_67,
  1, 107, :_reduce_none,
  1, 108, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_71,
  1, 109, :_reduce_none,
  6, 110, :_reduce_73,
  5, 110, :_reduce_74,
  4, 112, :_reduce_75,
  3, 112, :_reduce_76,
  1, 113, :_reduce_none,
  3, 113, :_reduce_78,
  3, 84, :_reduce_79,
  1, 84, :_reduce_none,
  4, 114, :_reduce_81,
  3, 114, :_reduce_82,
  4, 115, :_reduce_83,
  3, 115, :_reduce_84,
  2, 116, :_reduce_85,
  1, 95, :_reduce_86,
  3, 106, :_reduce_87,
  1, 106, :_reduce_none,
  1, 104, :_reduce_none,
  3, 104, :_reduce_90,
  1, 117, :_reduce_none,
  3, 117, :_reduce_92,
  2, 118, :_reduce_93,
  1, 118, :_reduce_none,
  1, 119, :_reduce_none,
  1, 120, :_reduce_none,
  3, 120, :_reduce_97,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 122, :_reduce_104,
  3, 122, :_reduce_105,
  3, 122, :_reduce_106,
  3, 122, :_reduce_107,
  3, 122, :_reduce_108,
  3, 122, :_reduce_109,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 123, :_reduce_none,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  3, 124, :_reduce_115,
  3, 124, :_reduce_116,
  1, 124, :_reduce_none,
  3, 126, :_reduce_118,
  3, 126, :_reduce_119,
  1, 126, :_reduce_none,
  2, 127, :_reduce_121,
  1, 127, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 129, :_reduce_126,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 133, :_reduce_131,
  3, 76, :_reduce_132,
  1, 76, :_reduce_none,
  1, 135, :_reduce_none,
  4, 131, :_reduce_135,
  1, 131, :_reduce_none,
  4, 136, :_reduce_137,
  4, 136, :_reduce_138,
  4, 136, :_reduce_139,
  4, 136, :_reduce_140,
  4, 136, :_reduce_141,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  3, 137, :_reduce_144,
  2, 137, :_reduce_145,
  2, 137, :_reduce_146,
  1, 137, :_reduce_147,
  3, 138, :_reduce_148,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  2, 141, :_reduce_151,
  1, 141, :_reduce_152,
  1, 128, :_reduce_153,
  1, 128, :_reduce_154,
  1, 90, :_reduce_155,
  3, 125, :_reduce_156,
  2, 125, :_reduce_157,
  1, 125, :_reduce_none,
  1, 142, :_reduce_none,
  2, 143, :_reduce_160,
  1, 143, :_reduce_161 ]

racc_reduce_n = 162

racc_shift_n = 267

racc_token_table = {
  false => 0,
  :error => 1,
  :LIMIT => 2,
  :unsigned_integer => 3,
  :comma => 4,
  :OFFSET => 5,
  :ORDER => 6,
  :BY => 7,
  :built_in_function => 8,
  :ASC => 9,
  :DESC => 10,
  :left_paren => 11,
  :right_paren => 12,
  :INSERT => 13,
  :INTO => 14,
  :VALUES => 15,
  :SELECT => 16,
  :asterisk => 17,
  :DISTINCT => 18,
  :AS => 19,
  :FROM => 20,
  :CROSS => 21,
  :JOIN => 22,
  :INNER => 23,
  :LEFT => 24,
  :OUTER => 25,
  :RIGHT => 26,
  :FULL => 27,
  :ON => 28,
  :USING => 29,
  :WHERE => 30,
  :GROUP => 31,
  :HAVING => 32,
  :NOT => 33,
  :BETWEEN => 34,
  :AND => 35,
  :IN => 36,
  :LIKE => 37,
  :IS => 38,
  :NULL => 39,
  :EXISTS => 40,
  :identifier => 41,
  :OR => 42,
  :equals_operator => 43,
  :not_equals_operator => 44,
  :less_than_operator => 45,
  :greater_than_operator => 46,
  :less_than_or_equals_operator => 47,
  :greater_than_or_equals_operator => 48,
  :plus_sign => 49,
  :minus_sign => 50,
  :solidus => 51,
  :CURRENT_USER => 52,
  :period => 53,
  :COUNT => 54,
  :AVG => 55,
  :MAX => 56,
  :MIN => 57,
  :SUM => 58,
  :E => 59,
  :quote => 60,
  :character_string_literal => 61,
  :DATE => 62,
  :date_string => 63 }

racc_nt_base = 64

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LIMIT",
  "unsigned_integer",
  "comma",
  "OFFSET",
  "ORDER",
  "BY",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "limit_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_modifier",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_7(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_11(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_13(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_25(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Distinct.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_34(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_50(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_67(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_79(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_87(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_97(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_121(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_126(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_151(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Date.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
